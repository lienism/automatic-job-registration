{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "Library",
      "DisplayName": "Library"
    },
    "ClosedComment": "To eliminate load delays, regardless of the .NET version, make sure the target platform for the calling assembly&#47;application is set to x86.",
    "ClosedDate": "2012-03-20T14:10:57.3-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "It takes a long time (Sometimes nearly 20 seconds) for the Task Editor to launch.\nAll the code is being done on the GUI thread, so a wait cursor (Or marquee bar) are not possible to be used in the \"Owner application\". Please can you find a way to display the outline of the editor with a waitcursor and then perform the population of tabs etc after the form has \"Shown\".",
    "LastUpdatedDate": "2013-05-16T04:49:10.153-07:00",
    "PlannedForRelease": "Release 1.8.3",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Medium",
      "Severity": 100,
      "Id": 2
    },
    "ProjectName": "taskscheduler",
    "ReportedDate": "2012-01-26T11:47:15.9-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Editor takes a long time to load under .NET 4.0",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 9855
  },
  "FileAttachments": [
    {
      "FileId": 3250,
      "FileName": "Test Crash in .Net 4.png",
      "DownloadUrl": ".\\3250"
    }
  ],
  "Comments": [
    {
      "Message": "BTW: These timings are from using 1.7.2 \"Pre-release\" (Same in 1.7.1) on Win 7 x64",
      "PostedDate": "2012-01-26T11:48:11.633-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I'll try and keep the timing discussions in here..\r\nWhen using the taskeditor \"ShowDialog\" it takes along while for the editor to show (A video is present in the other issue)\r\n\r\nOne of the things that this could be down to, is that the parent application that I am using is a .Net 4. The Task Editor is .Net 3.5 and needs to load in projects that are marked as .Net 2\r\nIt could be that this display delay is down to the Mix of .Net frameworks. i.e. it has to load another .Net framework into the running workspace environment to display the editor.\r\n",
      "PostedDate": "2012-01-30T11:55:45.707-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-01-30T12:36:50.437-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I don't think the different versions is the reason. The TestTaskService project included in the source code is running against .NET Framework 3.5 and loads the TaskScheduler assembly (marked .NET 2) without any problem or slow down. I have attached a zip file with that program and all supporting assemblies. Please extract and run on the problem system and let me know if you experience delays in opening TaskEditDialog.",
      "PostedDate": "2012-01-30T12:36:53.043-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Thanks\r\nI start it up, Wait about 2 seconds to load\r\nClick on Editor test, then click run. It then takes about 5 seconds to load the editor. Clicking ok, brings the windows back almost instantly.\r\nLooked in Process explorer and it shows that thi si running completely within the .Net 2 space\r\n\r\nBTW >net 3.5 runs .Net 2 applications as it is backward compatible (i.e. like in Win2k8) you only need to install .Net 3.5 SP1 and it will run every .Net app up to 3.5.\r\nNote: Where as .Net 4 is the 1st to disable backward compatibility, but there is a workaround If [and Only If] IFF .Net 3.5 is not installed and the app is \"well behaved\"; But it requires special config file settings.\r\n\r\nSo the next thing will be to have this Test app compiled in .Net 4 with the target framework set to .Net 4 runtime and then for that to be used for a timing test.\r\n",
      "PostedDate": "2012-01-31T09:26:21.693-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-01-31T11:00:42.467-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I took the latest test app from this code base.\r\nRemoved all the other things that were not the based on the test app code\r\nopened the vcproj in VS 2010 and set the properties to be a .Net 4 Profile\r\nCopied in the dll's from the Test app that you included here. and set them as references in the project.\r\nBuilt a debug version (Not much difference in .Net whichever it is)\r\nran the Debug version from outside of the dev environment\r\nClicked on the Edit button, then the Test.\r\nBang.. An exception occurred.\r\nPicture added [Test Crash in .Net 4]",
      "PostedDate": "2012-01-31T11:00:44.157-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Oops.. The crash was the fault of the test app, not the Dll's it is testing..\r\nIf you look at the exception in the picture it shows your username, So I replaced the user string with the following line:\r\n         string user = System.Security.Principal.WindowsIdentity.GetCurrent().Name;\r\n\r\nand re-ran.. No crash.\r\nBUT\r\n- It was back to the 18 seconds plus for the initial load time.\r\n- Performing from the registration or from the GetTask does not effect the time.\r\n- Pressing OK, brings the editor back almost immediately.",
      "PostedDate": "2012-01-31T11:37:43.54-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I have verified that this is the result of the assemblies being compiled for .NET pre-4.0 and this is a common/known problems for all .NET assemblies. For the next release, I will release two versions of the download: on for .NET 2.0/3.5 and another for 4.0.",
      "PostedDate": "2012-02-28T14:04:41.57-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-02-28T14:05:28.72-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-02-28T14:06:49.5-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Is this in 1.8.1 ?",
      "PostedDate": "2012-03-16T09:54:32.38-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-03-16T10:29:22.17-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Attached are the assemblies for 1.8.1 compiled against .NET 4. Will you test and let me know if you see the same delay as before?",
      "PostedDate": "2012-03-16T10:29:23.687-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Nearly there.\r\nFirst edit load takes 12 seconds, subsequent loads take 7 (No initial creation).\r\nYou will also need to supply the other Dll's as .Net 2 otherwise, the whole thing is negated (i.e. Areo, TimeSpan2, etc)\r\nOr are these controls not needed ?",
      "PostedDate": "2012-03-20T11:28:13.23-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I found the real problem. The .NET version has nothing to do with this. The project assemblies are compiled with \"Any CPU\" as the target platform, a carryover from the original development done under VS2008. What this translates to is that the 32-bit JIT compiler is being used. If your application is using \"Any CPU\" or x64 as the target, you will see a load delay due to WOW3264 being invoked to run the 32-bit JIT code from a 64-bit application. If you have the choice, use the default VS2010 setting of x86 as the target platform for your application assembly. With this new discovery, I will not be releasing the library compiled against .NET 4.0 as it makes no difference. In my test app, when target platform is x86, the dialog loads in about 1.5 seconds. If target platform is \"Any CPU\" or x64, it takes over 10 seconds to load.",
      "PostedDate": "2012-03-20T14:07:54.26-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-03-20T14:08:19.22-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-03-20T14:08:36.11-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-03-20T14:09:03.43-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-03-20T14:10:57.3-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:21:03.22-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:49:10.153-07:00",
      "Id": -2147483648
    }
  ]
}