{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2015-03-19T12:45:42.88-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "I am using the  to build a Console app targeting .NET 4 that creates several tasks after deleting any old ones it created itself. Here is a link to the [Stack Overflow Question](http://stackoverflow.com/q/28938705/938668).\n\nTask registration seems to succeed but the tasks do not launch and have somehow corrupted the Task Scheduler as follows:\n\n![Task Manager Error](http://i.stack.imgur.com/J6edh.png)\n\nThe error dialog box in the image pops up six times which is how many tasks my app deleted then recreated. This happens when the Task Scheduler MMC Console if first launched and also when the House of Synergy folder is selected.\n\nThe code is a bit lengthy but necessary and ready to compile:\n\n```\n    namespace TaskSchedulerHelper\n    {\n    \tusing System;\n    \tusing System.Diagnostics;\n    \tusing System.Linq;\n    \tusing System.Security.Principal;\n    \tusing System.Windows.Forms;\n    \tusing Microsoft.Win32.TaskScheduler;\n    \n    \tinternal static class Program\n    \t{\n    \t\t[STAThread]\n    \t\tprivate static void Main (string [] args)\n    \t\t{\n    \t\t\tvar now = DateTime.Now;\n    \t\t\tvar folderName = @\"House of Synergy\";\n    \t\t\tvar taskNamePrefix = @\"ShutDown Power Outage\";\n    \t\t\tvar applicationName = @\"Task Scheduler Helper\";\n    \n    \t\t\tvar times = new TimeSpan []\n    \t\t\t{\n    \t\t\t\tTimeSpan.FromHours(02), // 02:00 AM\n    \t\t\t\tTimeSpan.FromHours(06), // 06:00 AM\n    \t\t\t\tTimeSpan.FromHours(11), // 11:00 AM\n    \t\t\t\tTimeSpan.FromHours(15), // 03:00 PM\n    \t\t\t\tTimeSpan.FromHours(19), // 07:00 PM\n    \t\t\t\tTimeSpan.FromHours(23), // 11:00 PM\n    \t\t\t};\n    \n    \t\t\ttry\n    \t\t\t{\n    \t\t\t\tConsole.Title = applicationName;\n    \n    \t\t\t\tConsole.WriteLine(applicationName);\n    \t\t\t\tConsole.WriteLine();\n    \n    \t\t\t\t// Uses the Task Scheduler Managed Wrapper\n    \t\t\t\t//\tfrom https://taskscheduler.codeplex.com/.\n    \t\t\t\t//\tRelease: 2.3.0. Status: Stable.\n    \t\t\t\t//\tDate: Thu Dec 18, 2014 at 12:00 PM.\n    \t\t\t\tusing (TaskService service = new TaskService())\n    \t\t\t\t{\n    \t\t\t\t\tvar folder = service\n    \t\t\t\t\t\t.RootFolder\n    \t\t\t\t\t\t.SubFolders\n    \t\t\t\t\t\t.FirstOrDefault(f => (string.Compare(f.Name, folderName, StringComparison.InvariantCultureIgnoreCase) == 0));\n    \n    \t\t\t\t\tif (folder == null) { folder = service.RootFolder.CreateFolder(folderName); }\n    \n    \t\t\t\t\tvar tasks = folder\n    \t\t\t\t\t\t.Tasks\n    \t\t\t\t\t\t//.Where(t => t.Name.StartsWith(taskNamePrefix, StringComparison.InvariantCultureIgnoreCase))\n    \t\t\t\t\t\t.ToList();\n    \n    \t\t\t\t\tif (tasks.Any())\n    \t\t\t\t\t{\n    \t\t\t\t\t\t// Delete existing tasks.\n    \t\t\t\t\t\tConsole.WriteLine(\"Deleting existing tasks.\");\n    \t\t\t\t\t\tforeach (var task in tasks)\n    \t\t\t\t\t\t{\n    \t\t\t\t\t\t\tConsole.Write(\" - Deleting Task: {0}: \", task.Name);\n    \n    \t\t\t\t\t\t\ttry\n    \t\t\t\t\t\t\t{\n    \t\t\t\t\t\t\t\ttask.Stop();\n    \n    \t\t\t\t\t\t\t\t//task.Enabled = false; // Throws ComException: Element not found. (Exception from HRESULT: 0x80070490).\n    \t\t\t\t\t\t\t\t//Console.WriteLine(task.State); // Throws ComException: Element not found. (Exception from HRESULT: 0x80070490).\n    \n    \t\t\t\t\t\t\t\ttask.RegisterChanges();\n    \t\t\t\t\t\t\t\tfolder.DeleteTask(task.Name, false);\n    \t\t\t\t\t\t\t\ttask.Dispose();\n    \n    \t\t\t\t\t\t\t\tConsole.WriteLine(\"Done.\");\n    \t\t\t\t\t\t\t}\n    \t\t\t\t\t\t\tcatch (Exception exception)\n    \t\t\t\t\t\t\t{\n    \t\t\t\t\t\t\t\tConsole.WriteLine(\"Exception: {0}.\", exception);\n    \t\t\t\t\t\t\t}\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}\n    \n    \t\t\t\t\tConsole.WriteLine();\n    \t\t\t\t\tConsole.WriteLine(\"Creating new Tasks.\");\n    \n    \t\t\t\t\tforeach (var time in times)\n    \t\t\t\t\t{\n    \t\t\t\t\t\tvar dateTimeNow = now.Date;\n    \t\t\t\t\t\tvar definition = service.NewTask();\n    \t\t\t\t\t\tvar dateTimeTrigger = now.Date.Add(time);\n    \t\t\t\t\t\tvar taskName = taskNamePrefix + \" \" + dateTimeTrigger.ToString(@\"hh-mm tt\");\n    \n    \t\t\t\t\t\tConsole.Write(\" - Creating Task: {0}: \", taskName);\n    \n    \t\t\t\t\t\ttry\n    \t\t\t\t\t\t{\n    \t\t\t\t\t\t\tdefinition.RegistrationInfo.Author = WindowsIdentity.GetCurrent().Name;\n    \t\t\t\t\t\t\tdefinition.RegistrationInfo.Date = DateTime.Now;\n    \t\t\t\t\t\t\tdefinition.RegistrationInfo.Description = \"ShutDown event due to power outage at [\" + dateTimeTrigger.ToLongTimeString() + \"].\";\n    \t\t\t\t\t\t\tdefinition.RegistrationInfo.Source = applicationName;\n    \t\t\t\t\t\t\tdefinition.RegistrationInfo.Version = new Version(1, 0, 0, 0);\n    \n    \t\t\t\t\t\t\tdefinition.Settings.AllowDemandStart = true;\n    \t\t\t\t\t\t\tdefinition.Settings.AllowHardTerminate = false;\n    \t\t\t\t\t\t\tdefinition.Settings.Compatibility = TaskCompatibility.V2_1; // Windows 7 and above.\n    \t\t\t\t\t\t\tdefinition.Settings.DisallowStartIfOnBatteries = false;\n    \t\t\t\t\t\t\tdefinition.Settings.DisallowStartOnRemoteAppSession = false;\n    \t\t\t\t\t\t\tdefinition.Settings.Enabled = true;\n    \t\t\t\t\t\t\tdefinition.Settings.Hidden = false;\n    \t\t\t\t\t\t\tdefinition.Settings.MultipleInstances = TaskInstancesPolicy.IgnoreNew;\n    \t\t\t\t\t\t\tdefinition.Settings.Priority = ProcessPriorityClass.High;\n    \t\t\t\t\t\t\tdefinition.Settings.RestartCount = 10;\n    \t\t\t\t\t\t\tdefinition.Settings.RestartInterval = TimeSpan.FromMinutes(1);\n    \t\t\t\t\t\t\tdefinition.Settings.RunOnlyIfIdle = false;\n    \t\t\t\t\t\t\tdefinition.Settings.RunOnlyIfNetworkAvailable = false;\n    \t\t\t\t\t\t\tdefinition.Settings.StartWhenAvailable = true;\n    \t\t\t\t\t\t\tdefinition.Settings.StopIfGoingOnBatteries = false;\n    \t\t\t\t\t\t\tdefinition.Settings.UseUnifiedSchedulingEngine = true;\n    \t\t\t\t\t\t\tdefinition.Settings.WakeToRun = false;\n    \n    \t\t\t\t\t\t\tdefinition.Actions.Add(new ShowMessageAction(\"Message Body\", \"Message Title\"));\n    \t\t\t\t\t\t\tdefinition.Triggers.Add(new DailyTrigger() { StartBoundary = dateTimeTrigger.Subtract(TimeSpan.FromMinutes(10)), });\n    \n    \t\t\t\t\t\t\tvar task = folder.RegisterTaskDefinition(taskName, definition);\n    \n    \t\t\t\t\t\t\ttask.Enabled = true;\n    \t\t\t\t\t\t\ttask.RegisterChanges();\n    \t\t\t\t\t\t\t// Always succeeds.\n    \t\t\t\t\t\t\tConsole.WriteLine(\"Done.\");\n    \n    \t\t\t\t\t\t\ttry\n    \t\t\t\t\t\t\t{\n    \t\t\t\t\t\t\t\tConsole.WriteLine(\"   - Task Validation: \", task.Definition.Validate(throwException : true) ? \"Succeeded.\" : \"Failed.\");\n    \t\t\t\t\t\t\t}\n    \t\t\t\t\t\t\tcatch (Exception exception)\n    \t\t\t\t\t\t\t{\n    \t\t\t\t\t\t\t\t// Validation always fails.\n    \t\t\t\t\t\t\t\tConsole.WriteLine(\"   - Task Validation Exception: {0}.\", exception);\n    \t\t\t\t\t\t\t}\n    \t\t\t\t\t\t}\n    \t\t\t\t\t\tcatch (Exception exception)\n    \t\t\t\t\t\t{\n    \t\t\t\t\t\t\tConsole.WriteLine(\"Exception: {0}.\", exception.Message);\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\tcatch (Exception exception)\n    \t\t\t{\n    \t\t\t\tConsole.Write(exception);\n    \t\t\t}\n    \n    \t\t\tConsole.WriteLine();\n    \t\t\tConsole.WriteLine();\n    \t\t\tConsole.Write(\"Press any key to continue...\");\n    \t\t\tConsole.ReadKey(true);\n    \t\t}\n    \t}\n    }\n```",
    "LastUpdatedDate": "2015-03-19T12:45:42.88-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "taskscheduler",
    "ReportedDate": "2015-03-09T02:42:36.427-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Fixed"
    },
    "Summary": "Task Scheduler corrupted after using the managed wrapper to delete and re-create tasks",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 12042
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Please note that the app targets .NET 4 on Windows 7 and uses a TaskCompatibility value of V2_1.",
      "PostedDate": "2015-03-09T02:44:22.967-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Thank you for the detail. I will try to get to this today, but have to travel for my real job this week and may not get to resolve this until Friday. At first glance, you are unnecessarily calling RegisterChanges in two places. Also, instead of enumerating folders, you should be able to just call\n```\nif (RootFolder.SubFolders.Exists(folderName))\n   folder = RootFolder.SubFolders[folderName];\nelse\n   folder = RootFolder.CreateFolder(folderName);\n```\nto get a reference to the folder. This will come back null if the folder doesn't exist.\r\n\r\nYou may also want to try extracting the task names to a list and then using those names to delete the tasks instead of holding on to the Task references.",
      "PostedDate": "2015-03-09T09:43:27.903-07:00",
      "Id": -2147483648
    },
    {
      "Message": "You can also call\n```\nfolder.GetTasks(new Wildcard(taskNamePrefix + \"*\"))\n```\nto get a filtered list of tasks from a folder.",
      "PostedDate": "2015-03-09T09:48:20.063-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Try this. It incorporates the changes I suggested above. Also, the validation is failing because you have set UseUnifiedSchedulingEngine = true. Unless you must use this, I'd suggest setting it to false as it could cause problems with later versions of Windows.\n```\nvar now = DateTime.Now;\nvar folderName = @\"House of Synergy\";\nvar taskNamePrefix = @\"ShutDown Power Outage\";\nvar applicationName = @\"Task Scheduler Helper\";\r\n\r\nvar times = new TimeSpan[]\n\t{\n\t\tTimeSpan.FromHours(02), // 02:00 AM\n\t\tTimeSpan.FromHours(06), // 06:00 AM\n\t\tTimeSpan.FromHours(11), // 11:00 AM\n\t\tTimeSpan.FromHours(15), // 03:00 PM\n\t\tTimeSpan.FromHours(19), // 07:00 PM\n\t\tTimeSpan.FromHours(23), // 11:00 PM\n\t};\r\n\r\ntry\n{\n\tConsole.Title = applicationName;\r\n\r\n\tConsole.WriteLine(applicationName);\n\tConsole.WriteLine();\r\n\r\n\t// Uses the Task Scheduler Managed Wrapper\n\t//  from https://taskscheduler.codeplex.com/.\n\t//  Release: 2.3.0. Status: Stable.\n\t//  Date: Thu Dec 18, 2014 at 12:00 PM.\n\tusing (TaskService service = new TaskService())\n\t{\n\t\tTaskFolder folder;\n\t\tif (service.RootFolder.SubFolders.Exists(folderName))\n\t\t\tfolder = service.RootFolder.SubFolders[folderName];\n\t\telse\n\t\t\tfolder = service.RootFolder.CreateFolder(folderName);\r\n\r\n\t\tvar tasks = folder.GetTasks(new Wildcard(taskNamePrefix + \"*\"));\r\n\r\n\t\tif (tasks.Count > 0)\n\t\t{\n\t\t\t// Delete existing tasks.\n\t\t\tConsole.WriteLine(\"Deleting existing tasks.\");\n\t\t\tforeach (var task in tasks)\n\t\t\t{\n\t\t\t\tConsole.Write(\" - Deleting Task: {0}: \", task.Name);\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\ttask.Stop();\n\t\t\t\t\tfolder.DeleteTask(task.Name, false);\n\t\t\t\t\t// CHANGE: don't dispose of task, they all auto-dispose at the right time\n\t\t\t\t\tConsole.WriteLine(\"Done.\");\n\t\t\t\t}\n\t\t\t\tcatch (Exception exception)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"Exception: {0}.\", exception);\n\t\t\t\t}\n\t\t\t}\n\t\t}\r\n\r\n\t\tConsole.WriteLine();\n\t\tConsole.WriteLine(\"Creating new Tasks.\");\r\n\r\n\t\tforeach (var time in times)\n\t\t{\n\t\t\tvar dateTimeNow = now.Date;\n\t\t\tvar definition = service.NewTask();\n\t\t\tvar dateTimeTrigger = now.Date.Add(time);\n\t\t\tvar taskName = taskNamePrefix + \" \" + dateTimeTrigger.ToString(@\"hh-mm tt\");\r\n\r\n\t\t\tConsole.Write(\" - Creating Task: {0}: \", taskName);\r\n\r\n\t\t\ttry\n\t\t\t{\n\t\t\t\tdefinition.RegistrationInfo.Author = System.Security.Principal.WindowsIdentity.GetCurrent().Name;\n\t\t\t\tdefinition.RegistrationInfo.Date = DateTime.Now;\n\t\t\t\tdefinition.RegistrationInfo.Description = \"ShutDown event due to power outage at [\" + dateTimeTrigger.ToLongTimeString() + \"].\";\n\t\t\t\tdefinition.RegistrationInfo.Source = applicationName;\n\t\t\t\tdefinition.RegistrationInfo.Version = new Version(1, 0, 0, 0);\r\n\r\n\t\t\t\tdefinition.Settings.AllowDemandStart = true;\n\t\t\t\tdefinition.Settings.AllowHardTerminate = false;\n\t\t\t\tdefinition.Settings.Compatibility = TaskCompatibility.V2_1; // Windows 7 and above.\n\t\t\t\tdefinition.Settings.DisallowStartIfOnBatteries = false;\n\t\t\t\tdefinition.Settings.DisallowStartOnRemoteAppSession = false;\n\t\t\t\tdefinition.Settings.Enabled = true;\n\t\t\t\tdefinition.Settings.Hidden = false;\n\t\t\t\tdefinition.Settings.MultipleInstances = TaskInstancesPolicy.IgnoreNew;\n\t\t\t\tdefinition.Settings.Priority = System.Diagnostics.ProcessPriorityClass.High;\n\t\t\t\tdefinition.Settings.RestartCount = 10;\n\t\t\t\tdefinition.Settings.RestartInterval = TimeSpan.FromMinutes(1);\n\t\t\t\tdefinition.Settings.RunOnlyIfIdle = false;\n\t\t\t\tdefinition.Settings.RunOnlyIfNetworkAvailable = false;\n\t\t\t\tdefinition.Settings.StartWhenAvailable = true;\n\t\t\t\tdefinition.Settings.StopIfGoingOnBatteries = false;\n\t\t\t\tdefinition.Settings.UseUnifiedSchedulingEngine = true;\n\t\t\t\tdefinition.Settings.WakeToRun = false;\r\n\r\n\t\t\t\tdefinition.Actions.Add(new ShowMessageAction(\"Message Body\", \"Message Title\"));\n\t\t\t\tdefinition.Triggers.Add(new DailyTrigger() { StartBoundary = dateTimeTrigger.Subtract(TimeSpan.FromMinutes(10)), });\r\n\r\n\t\t\t\tvar task = folder.RegisterTaskDefinition(taskName, definition);\n\t\t\t\t// CHANGE: Don't need to enable or re-register, you just did that.\n\t\t\t\t// Always succeeds.\n\t\t\t\tConsole.WriteLine(\"Done.\");\r\n\r\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(\"   - Task Validation: \", task.Definition.Validate(throwException: true) ? \"Succeeded.\" : \"Failed.\");\n\t\t\t\t}\n\t\t\t\tcatch (Exception exception)\n\t\t\t\t{\n\t\t\t\t\t// Validation always fails.\n\t\t\t\t\tConsole.WriteLine(\"   - Task Validation Exception: {0}.\", exception);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception exception)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"Exception: {0}.\", exception.Message);\n\t\t\t}\n\t\t}\n\t}\n}\ncatch (Exception exception)\n{\n\tConsole.Write(exception);\n}\r\n\r\nConsole.WriteLine();\nConsole.WriteLine();\nConsole.Write(\"Press any key to continue...\");\nConsole.ReadKey(true);\n```",
      "PostedDate": "2015-03-09T21:54:16.897-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Thank you for your guidance. I will incorporate the changes and revert back here shortly.\r\n\r\nIt may take some time to figure out what has gone wrong with the Task Scheduler on my machine in the first place so I'll post what I find on that front as well.",
      "PostedDate": "2015-03-10T01:11:51.24-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Ok so it appears that setting UseUnifiedSchedulingEngine to true was indeed the cause of the problem. It all works now. The other changes you mentioned have also made the app more stable. Thanks again.\r\n\r\nOne question though. If I try to schedule a task with a trigger \"StartBoundary\" within the next hour, the task is created fine but the \"NextRunTime\" is scheduled for a day ahead. I tried setting the \"StartBoundary\" to a day before the current time as well but with the same result. Of course the \"NextRunTime\" property is read-only so not sure how to force a task to be scheduled sooner than one hour from the current date/time.",
      "PostedDate": "2015-03-10T02:30:52.71-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I'm glad that worked. As far as StartBoundary, if you don't set it at all, does the NextRunTime correct? The default behavior has the start time as the time the task is registered. By the way, another optimization is that you can just add all those triggers to the same task. Try both those and let me know if you see a different NextRunTime result.",
      "PostedDate": "2015-03-10T09:20:32.947-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2015-03-19T12:45:42.88-07:00",
      "Id": -2147483648
    }
  ]
}