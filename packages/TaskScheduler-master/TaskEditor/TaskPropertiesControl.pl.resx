<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="taskNameLabel.Text" xml:space="preserve">
    <value>Na&amp;zwa:</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Lokalizacja:</value>
  </data>
  <data name="taskAuthorLabel.Text" xml:space="preserve">
    <value>Autor:</value>
  </data>
  <data name="taskDescLabel.Text" xml:space="preserve">
    <value>&amp;Opis:</value>
  </data>
  <data name="taskNameText.Text" xml:space="preserve">
    <value>Nazwa zadania</value>
  </data>
  <data name="taskVersionLabel.Text" xml:space="preserve">
    <value>&amp;Konfiguruj dla:</value>
  </data>
  <data name="taskHiddenCheck.Text" xml:space="preserve">
    <value>&amp;Ukryte</value>
  </data>
  <data name="taskRunLevelCheck.Text" xml:space="preserve">
    <value>Uruchom z &amp;najwyższymi uprawnieniami</value>
  </data>
  <data name="taskLocalOnlyCheck.Text" xml:space="preserve">
    <value>Nie prz&amp;echowuj hasła. Zadanie będzie miało dostęp tylko do zasobów komputera lokalnego.</value>
  </data>
  <data name="taskLoggedOptionalRadio.Text" xml:space="preserve">
    <value>Uruchom, czy użytkownik jest zalogowany lub nie</value>
  </data>
  <data name="taskLoggedOnRadio.Text" xml:space="preserve">
    <value>U&amp;ruchom tylko wtedy, gdy użytkownik jest zalogowany</value>
  </data>
  <data name="changePrincipalButton.Text" xml:space="preserve">
    <value>Z&amp;mień użytkownika lub grupę…</value>
  </data>
  <data name="taskUserAcctLabel.Text" xml:space="preserve">
    <value>Przy uruchamianiu zadania użyj następującego konta użytkownika: </value>
  </data>
  <data name="taskSecurityGroupBox.Text" xml:space="preserve">
    <value>Opcje zabezpieczeń</value>
  </data>
  <data name="generalTab.Text" xml:space="preserve">
    <value>Ogólne</value>
  </data>
  <data name="taskTriggerIntroLabel.Text" xml:space="preserve">
    <value>Podczas tworzenia zadania, możesz określić warunki, które będą wyzwalać to zadanie.</value>
  </data>
  <data name="triggersTab.Text" xml:space="preserve">
    <value>Wyzwalacze</value>
  </data>
  <data name="actionIntroLabel.Text" xml:space="preserve">
    <value>Gdy tworzysz zadanie, musisz określić akcję, która wystąpi w momencie uruchomienia zadania.</value>
  </data>
  <data name="actionsTab.Text" xml:space="preserve">
    <value>Akcje</value>
  </data>
  <data name="taskStartIfConnectionCheck.Text" xml:space="preserve">
    <value>U&amp;ruchom tylko wtedy, gdy następujące połączenie sieciowe jest dostępne:</value>
  </data>
  <data name="networkConditionGroupBox.Text" xml:space="preserve">
    <value>Sieć</value>
  </data>
  <data name="taskStopIfGoingOnBatteriesCheck.Text" xml:space="preserve">
    <value>Zatrzymaj, jeśli komputer przełączy się na zasilanie &amp;bateryjne</value>
  </data>
  <data name="taskWakeToRunCheck.Text" xml:space="preserve">
    <value>&amp;Wznów pracę komputera, aby uruchomić to zadanie</value>
  </data>
  <data name="taskDisallowStartIfOnBatteriesCheck.Text" xml:space="preserve">
    <value>Uruchom zadanie tylko wtedy, gdy komputer jest na zasilaniu &amp;sieciowym</value>
  </data>
  <data name="powerConditionGroupBox.Text" xml:space="preserve">
    <value>Zasilanie</value>
  </data>
  <data name="taskRestartOnIdleCheck.Text" xml:space="preserve">
    <value>Uruc&amp;hom ponownie, jeśli stan bezczynności powróci</value>
  </data>
  <data name="taskStopOnIdleEndCheck.Text" xml:space="preserve">
    <value>&amp;Zatrzymaj, jeśli komputer przestanie być bezczynny</value>
  </data>
  <data name="taskIdleWaitTimeoutLabel.Text" xml:space="preserve">
    <value>&amp;Czekaj na bezczynność przez:</value>
  </data>
  <data name="taskIdleDurationCheck.Text" xml:space="preserve">
    <value>&amp;Uruchom zadanie tylko wtedy, gdy komputer jest bezczynny przez:</value>
  </data>
  <data name="idleConditionGroupBox.Text" xml:space="preserve">
    <value>Bezczynność</value>
  </data>
  <data name="conditionIntroLabel.Text" xml:space="preserve">
    <value>Określ warunki, które wraz z wyzwalacz, określić, czy zadanie ma być uruchomione. Zadanie zostanie uruchomione, jeśli każdy warunek określony nie jest prawdziwe.</value>
  </data>
  <data name="conditionsTab.Text" xml:space="preserve">
    <value>Warunki</value>
  </data>
  <data name="taskRunningRuleLabel.Text" xml:space="preserve">
    <value>Jeśli zada&amp;nie jest już uruchomione, zastosuj następującą regułę:</value>
  </data>
  <data name="taskRestartAttemptTimesLabel.Text" xml:space="preserve">
    <value>razy</value>
  </data>
  <data name="taskRestartCountLabel.Text" xml:space="preserve">
    <value>&amp;Spróbuj uruchomić nie więcej niż:</value>
  </data>
  <data name="taskDeleteAfterCheck.Text" xml:space="preserve">
    <value>Jeśli zadanie nie jest ponownie zaplanowane, &amp;usuń je po:</value>
  </data>
  <data name="taskAllowHardTerminateCheck.Text" xml:space="preserve">
    <value>&amp;Jeśli zadanie nie zakończy się na żądanie, wymuś zatrzymanie</value>
  </data>
  <data name="taskExecutionTimeLimitCheck.Text" xml:space="preserve">
    <value>Z&amp;atrzymaj zadanie, jeśli działa dłużej niż:</value>
  </data>
  <data name="taskRestartIntervalCheck.Text" xml:space="preserve">
    <value>P&amp;o błędzie uruchom ponownie co:</value>
  </data>
  <data name="taskStartWhenAvailableCheck.Text" xml:space="preserve">
    <value>Uruchom szybko za&amp;danie, jeśli pominięto zaplanowane uruchomienie</value>
  </data>
  <data name="taskAllowDemandStartCheck.Text" xml:space="preserve">
    <value>&amp;Zezwalaj na uruchamianie zadania na żądanie</value>
  </data>
  <data name="settingsIntroLabel.Text" xml:space="preserve">
    <value>Określ dodatkowe ustawienia wpływające na zachowanie zadania.</value>
  </data>
  <data name="settingsTab.Text" xml:space="preserve">
    <value>Ustawienia</value>
  </data>
  <data name="taskRegSourceLabel.Text" xml:space="preserve">
    <value>Ź&amp;ródło:</value>
  </data>
  <data name="taskRegURILabel.Text" xml:space="preserve">
    <value>&amp;URI:</value>
  </data>
  <data name="taskRegDocLabel.Text" xml:space="preserve">
    <value>&amp;Dokumentacja:</value>
  </data>
  <data name="taskRegSDDLLabel.Text" xml:space="preserve">
    <value>&amp;Zabezpieczenia:</value>
  </data>
  <data name="taskRegVersionLabel.Text" xml:space="preserve">
    <value>&amp;Wersja:</value>
  </data>
  <data name="taskRegSDDLBtn.Text" xml:space="preserve">
    <value>&amp;Edytuj...</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Określ informacje rejestracyjne dla zadania.</value>
  </data>
  <data name="regInfoTab.Text" xml:space="preserve">
    <value>Informacje</value>
  </data>
  <data name="taskMaintenanceDeadlineLabel.Text" xml:space="preserve">
    <value>Jeśli zadanie nie zakończy się, uruchom ponownie po:</value>
  </data>
  <data name="taskMaintenancePeriodLabel.Text" xml:space="preserve">
    <value>Podczas konserwacji, uruchom zadanie co:</value>
  </data>
  <data name="taskMaintenanceExclusiveCheck.Text" xml:space="preserve">
    <value>Uruchom zadanie w trybie wyłączności</value>
  </data>
  <data name="autoMaintGroup.Text" xml:space="preserve">
    <value>Automatyczna konserwacja</value>
  </data>
  <data name="taskEnabledCheck.Text" xml:space="preserve">
    <value>Włączone</value>
  </data>
  <data name="principalSIDTypeLabel.Text" xml:space="preserve">
    <value>Typ identyfikatora zabezpieczeń (SID):</value>
  </data>
  <data name="principalReqPrivilegesLabel.Text" xml:space="preserve">
    <value>Wymagane uprawnienia:</value>
  </data>
  <data name="secHardGroup.Text" xml:space="preserve">
    <value>Udoskonalanie zabezpieczeń</value>
  </data>
  <data name="taskDisallowStartOnRemoteAppSessionCheck.Text" xml:space="preserve">
    <value>Nie zezwalaj na uruchamianie w sesji Remote Application Session Integrated Locally (RAIL)</value>
  </data>
  <data name="taskUseUnifiedSchedulingEngineCheck.Text" xml:space="preserve">
    <value>Użyj zunifikowanego mechanizmu harmonogramowania</value>
  </data>
  <data name="taskVolatileCheck.Text" xml:space="preserve">
    <value>Automatycznie wyłącz zadanie przy każdym uruchomieniu Windows</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>Priorytet:</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Określ dodatkowe parametry zabezpieczenia, konserwacji oraz zgodności dla zadania.</value>
  </data>
  <data name="addPropTab.Text" xml:space="preserve">
    <value>Dodatkowe</value>
  </data>
  <data name="runTimesErrorLabel.Text" xml:space="preserve">
    <value>(tekst błędu)</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Błąd:</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Nie można pokazać czasów uruchomienia tego zadania.</value>
  </data>
  <data name="runTimesTab.Text" xml:space="preserve">
    <value>Uruchamianie</value>
  </data>
  <data name="historyTab.Text" xml:space="preserve">
    <value>Historia</value>
  </data>
</root>