[
  {
    "Id": "1482198",
    "ThreadId": "657470",
    "Html": "I have scoured the internet and there are suggestions that work for certain scenarios, but none work for me. I'm creating a task in a custom action inside the installer. The installer runs as SYSTEM, so instead of my domain\\username I get SYSTEM. And, I'm installing a service, which also runs as SYSTEM. Is there a way of getting the actual current user's name, short of asking the user to enter manually? Here's my code:<br />\n<pre><code>\n//Works, I get &quot;Bob-PC\\Bob&quot; if I run the code as a user. If it's run as a system\n// I get &quot;WORKGROUP\\SYSTEM&quot;\nstring user = Environment.UserDomainName + &quot;\\\\&quot;+ Environment.UserName;\n// doesn't work, returns &quot;NT AUTHORITY\\SYSTEM&quot;\nstring user2 = System.Security.Principal.WindowsIdentity.GetCurrent().Name;\n// doesn't work at all, this is not ASP.NET \nstring user3 = &quot;&quot;;//Request.LogonUserIdentity.Name;\n// doesn't work, my thread is unnamed\nstring user4 = System.Threading.Thread.CurrentPrincipal.Identity.Name;\n\nMessageBox.Show(&quot;user &quot; + user + &quot;\\nuser2 &quot; + user2 + &quot;\\nuser3 &quot; + user3 + &quot;\\nuser4 &quot; + user4);\ntf.RegisterTaskDefinition(&quot;MyTask&quot;, td,\n    TaskCreation.CreateOrUpdate,\n    user,\n    null,\n    TaskLogonType.InteractiveToken,\n    null);\n</code></pre>\n\n",
    "PostedDate": "2016-08-27T13:11:14.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1482200",
    "ThreadId": "657470",
    "Html": "Thanks I have found the answer on this board! <br />\nJust use:<br />\n<pre><code>  ts.RootFolder.RegisterTaskDefinition(&quot;MyTask&quot;, td,\n                    TaskCreation.CreateOrUpdate, &quot;SYSTEM&quot;, null,\n                    TaskLogonType.ServiceAccount);</code></pre>\n\nor rather, in my case:<br />\n<pre><code>\n tf.RegisterTaskDefinition(&quot;MyTask&quot;, td,\n                    TaskCreation.CreateOrUpdate, &quot;SYSTEM&quot;, null,\n                    TaskLogonType.ServiceAccount);</code></pre>\n\n",
    "PostedDate": "2016-08-27T14:08:13.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1482219",
    "ThreadId": "657470",
    "Html": "That did create the task but then ran the process launched by the task as SYSTEM, not user. So I was back to square 1! Here's the way to get the username during install as a SYSTEM:<br />\n<pre><code>ManagementObjectSearcher searcher = new ManagementObjectSearcher(&quot;SELECT UserName FROM Win32_ComputerSystem&quot;);\nManagementObjectCollection collection = searcher.Get();\nstring username = (string)collection.Cast&lt;ManagementBaseObject&gt;().First()[&quot;UserName&quot;];\n MessageBox.Show(username);</code></pre>\n\nNot sure what happens when you have multiple users on the machine.. <br />\n",
    "PostedDate": "2016-08-27T17:17:07.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2016-09-17T10:29:22.317-07:00"
  },
  {
    "Id": "1482220",
    "ThreadId": "657470",
    "Html": "Here's what works for one user and many users (hopefully for the latter) :D<br />\n<pre><code>       private static void CreateSheduledTask1(string targetPathDir)\n        {\n            try\n            {\n                // Get the service on the local machine\n                using (TaskService ts = new TaskService())\n                {\n                    string folder = &quot;Luna Sleep Tasks&quot;;\n                    if (!ts.RootFolder.SubFolders.Exists(&quot;\\\\&quot; + folder))\n                    {\n                        ts.RootFolder.CreateFolder(folder);\n                    }\n                    TaskFolder tf = ts.GetFolder(folder);\n                    // Create a new task definition and assign properties\n                    TaskDefinition td = ts.NewTask();\n                    td.Settings.AllowDemandStart = true;\n                    td.Settings.Compatibility = TaskCompatibility.V2;\n                    td.Settings.Enabled = true;\n                    td.Settings.RunOnlyIfIdle = false;\n                    td.Settings.IdleSettings.StopOnIdleEnd = true;\n                    td.Settings.IdleSettings.RestartOnIdle = false;\n                    td.Settings.DisallowStartIfOnBatteries = false;\n                    td.Settings.DisallowStartOnRemoteAppSession = false;\n                    td.Settings.UseUnifiedSchedulingEngine = true;\n                    td.Settings.WakeToRun = false;\n                    td.Settings.MultipleInstances = TaskInstancesPolicy.IgnoreNew;\n                    td.Settings.RunOnlyIfNetworkAvailable = false;\n                    td.Settings.ExecutionTimeLimit = new TimeSpan(72, 0, 0);\n                    td.Settings.Priority = ProcessPriorityClass.Normal;\n\n                    td.RegistrationInfo.Description = &quot;Created by Luna Sleep Service installer.&quot;;\n\n                    DailyTrigger dt = new DailyTrigger();\n                    dt.Enabled = false;\n                    dt.StartBoundary = System.DateTime.Now;\n                    td.Triggers.Add(dt);\n\n                    td.Principal.RunLevel = TaskRunLevel.Highest;\n\n                    td.Actions.Add(new ExecAction(targetPathDir + &quot;\\\\LunaSleep.exe&quot;, null, null));\n\n                    ManagementObjectSearcher searcher = new ManagementObjectSearcher(&quot;SELECT UserName FROM Win32_ComputerSystem&quot;);\n                    ManagementObjectCollection collection = searcher.Get();\n                    string username = (string)collection.Cast&lt;ManagementBaseObject&gt;().First()[&quot;UserName&quot;];\n\n                    MessageBox.Show(&quot;moc user:&quot; + username);\n\n                    \n                    tf.RegisterTaskDefinition(&quot;Luna Sleep Task&quot;, td,\n                        TaskCreation.CreateOrUpdate,\n                        username,\n                        null,\n                        TaskLogonType.InteractiveToken,\n                        null);\n                   \n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(ex.ToString());\n            }\n        }\n\n        private static void CreateSheduledTaskManyUsers(string targetPathDir)\n        {\n            try\n            {\n                // Get the service on the local machine\n                using (TaskService ts = new TaskService())\n                {\n                    string folder = &quot;Luna Sleep Tasks&quot;;\n                    if (!ts.RootFolder.SubFolders.Exists(&quot;\\\\&quot; + folder))\n                    {\n                        ts.RootFolder.CreateFolder(folder);\n                    }\n                    TaskFolder tf = ts.GetFolder(folder);\n                    // Create a new task definition and assign properties\n                    TaskDefinition td = ts.NewTask();\n                    td.Settings.AllowDemandStart = true;\n                    td.Settings.Compatibility = TaskCompatibility.V2;\n                    td.Settings.Enabled = true;\n                    td.Settings.RunOnlyIfIdle = false;\n                    td.Settings.IdleSettings.StopOnIdleEnd = true;\n                    td.Settings.IdleSettings.RestartOnIdle = false;\n                    td.Settings.DisallowStartIfOnBatteries = false;\n                    td.Settings.DisallowStartOnRemoteAppSession = false;\n                    td.Settings.UseUnifiedSchedulingEngine = true;\n                    td.Settings.WakeToRun = false;\n                    td.Settings.MultipleInstances = TaskInstancesPolicy.IgnoreNew;\n                    td.Settings.RunOnlyIfNetworkAvailable = false;\n                    td.Settings.ExecutionTimeLimit = new TimeSpan(72, 0, 0);\n                    td.Settings.Priority = ProcessPriorityClass.Normal;\n\n                    td.RegistrationInfo.Description = &quot;Created by Luna Sleep Service installer.&quot;;\n\n                    DailyTrigger dt = new DailyTrigger();\n                    dt.Enabled = false;\n                    dt.StartBoundary = System.DateTime.Now;\n                    td.Triggers.Add(dt);\n\n                    td.Principal.RunLevel = TaskRunLevel.Highest;\n\n                    td.Actions.Add(new ExecAction(targetPathDir + &quot;\\\\LunaSleep.exe&quot;, null, null));\n\n                    ManagementObjectSearcher searcher = new ManagementObjectSearcher(&quot;SELECT UserName FROM Win32_ComputerSystem&quot;);\n                    ManagementObjectCollection collection = searcher.Get();\n\n                    foreach(ManagementObject o in collection)\n                    {\n                        \n                        try\n                        {\n                            username = (string)o[&quot;UserName&quot;];\n\n                            MessageBox.Show(&quot;moc user:&quot; + username);\n\n\n                            tf.RegisterTaskDefinition(&quot;Luna Sleep Task&quot;, td,\n                                TaskCreation.CreateOrUpdate,\n                                username,\n                                null,\n                                TaskLogonType.InteractiveToken,\n                                null);\n                        }\n                        catch\n                        {\n                            MessageBox.Show(username + &quot; didn't work&quot;);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(ex.ToString());\n            }\n        }\n        static string username;</code></pre>\n\n",
    "PostedDate": "2016-08-27T17:41:00.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2016-09-17T10:29:20.413-07:00"
  },
  {
    "Id": "1482451",
    "ThreadId": "657470",
    "Html": "Glad you figured it out. Just some thoughts on code optimizations:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// If just creating a default TaskService (new TaskService()), use TaskService.Instance instead.</span>\n<span style=\"color:Green;\">// You can then avoid the &quot;using&quot; clause.</span>\nTaskService ts = TaskService.Instance;\n\n<span style=\"color:Green;\">// Use this statement to get a folder that may have not been created.</span>\nTaskFolder tf = ts.RootFolder.GetFolder(folderName) ?? ts.RootFolder.CreateFolder(folderName);\n\n<span style=\"color:Green;\">// All triggers set StartBoundary to DateTime.Now in the constructor so you could write:</span>\ntd.Triggers.Add(<span style=\"color:Blue;\">new</span> DailyTrigger { Enabled = <span style=\"color:Blue;\">false</span> });\n\n<span style=\"color:Green;\">// You don&#39;t need to explicitly add ExecAction. Instead you can write:</span>\ntd.Actions.Add(targetPathDir + <span style=\"color:#A31515;\">&quot;\\\\LunaSleep.exe&quot;</span>);\r\n</pre></div>",
    "PostedDate": "2016-08-30T14:43:30.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1482469",
    "ThreadId": "657470",
    "Html": "Thank you! And I want to thank you for creating this C# COM wrapper! Great Job!!!!<br />\n",
    "PostedDate": "2016-08-30T22:42:32.637-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]