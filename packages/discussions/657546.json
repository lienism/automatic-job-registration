[
  {
    "Id": "1482447",
    "ThreadId": "657546",
    "Html": "Does this make any sense to you? System.IO.DirectoryNotFoundException, huh?<br />\n<pre><code>Exception Type: System.IO.DirectoryNotFoundException\nMessage: The system cannot find the path specified. (Exception from HRESULT: 0x80070003)\n\nThe exception occurred at Microsoft.Win32.TaskScheduler.V2Interop.ITaskFolder.RegisterTaskDefinition(String Path, ITaskDefinition pDefinition, Int32 flags, Object UserId, Object password, TaskLogonType LogonType, Object sddl)\n   at Microsoft.Win32.TaskScheduler.TaskFolder.RegisterTaskDefinition(String Path, TaskDefinition definition, TaskCreation createType, String UserId, String password, TaskLogonType LogonType, String sddl) in C:\\Users\\dahall\\Documents\\Visual Studio 2010\\Projects\\TaskService\\TaskFolder.cs:line 430\n   at Microsoft.Win32.TaskScheduler.TaskFolder.RegisterTaskDefinition(String Path, TaskDefinition definition) in C:\\Users\\dahall\\Documents\\Visual Studio 2010\\Projects\\TaskService\\TaskFolder.cs:line 373</code></pre>\n\nAnd yes, I make sure that my task folder exists before going ahead and attempting to make my task.<br />\n<br />\nThe code that I'm using is this...<br />\n<pre><code>Function doesTaskFolderExist() As Boolean\n  Try\n    Return TaskScheduler.TaskService.Instance.RootFolder.SubFolders.Exists(&quot;myTaskFolder&quot;)\n  Catch ex As Exception\n    Return False\n  End Try\nEnd Function\n\nIf doesTaskFolderExist() = False Then\n  taskService.RootFolder.CreateFolder(&quot;my folder&quot;)\nEnd If\n\ntaskService.RootFolder.SubFolders(&quot;myTaskFolder&quot;).RegisterTaskDefinition(&quot;myTask&quot;, newTask)</code></pre>\n\n",
    "PostedDate": "2016-08-30T13:41:43.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1482454",
    "ThreadId": "657546",
    "Html": "The error is coming from the RegisterTaskDefinition native method. It likely has something to do with the settings for <code>newTask</code>.\r<br />\n<br />\nTo make the syntax simpler, try:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">Dim</span> tf = <span style=\"color:Blue;\">If</span>(ts.GetFolder(<span style=\"color:#A31515;\">&quot;X&quot;</span>), ts.RootFolder.CreateFolder(<span style=\"color:#A31515;\">&quot;X&quot;</span>))\ntf.RegisterTaskDefinition(<span style=\"color:#A31515;\">&quot;myTask&quot;</span>, newTask)\r\n</pre></div>",
    "PostedDate": "2016-08-30T14:56:28.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1482455",
    "ThreadId": "657546",
    "Html": "Trying to find out why the code works on some machines and other it doesn't is turning into a real pain in the rear end.\r<br />\n<br />\nHere's my code that I'm using. Like I said, it works on most machines with no issues but others... oops, something went wrong.<br />\n<pre><code>Dim taskService As New TaskService()\nDim newTask As TaskDefinition = taskService.NewTask\nDim logonTriggerDefinition As LogonTrigger = New LogonTrigger\n\nnewTask.Triggers.Add(logonTriggerDefinition)\nnewTask.RegistrationInfo.Description = &quot;My Task&quot;\nnewTask.Principal.RunLevel = TaskRunLevel.Highest\nnewTask.Principal.LogonType = TaskLogonType.InteractiveToken\n\nDim exePathInfo As New IO.FileInfo(Application.ExecutablePath)\nnewTask.Actions.Add(New ExecAction(exePathInfo.FullName, &quot;&quot;, exePathInfo.DirectoryName))\nexePathInfo = Nothing\n\nWith newTask.Settings\n    .Compatibility = TaskCompatibility.V2\n    .AllowDemandStart = True\n    .DisallowStartIfOnBatteries = False\n    .RunOnlyIfIdle = False\n    .StopIfGoingOnBatteries = False\n    .AllowHardTerminate = False\n    .ExecutionTimeLimit = Nothing\nEnd With\n\nTry\n    newTask.Validate(True)\nCatch ex As InvalidOperationException\n    newTask.Dispose()\n    taskService.Dispose()\n\n    Functions.eventLogFunctions.writeToSystemEventLog(&quot;There was an error while validating the task definition settings.&quot;, EventLogEntryType.Error)\n    Functions.eventLogFunctions.writeCrashToEventLog(ex)\n\n    MsgBox(&quot;There was an error while validating the task definition settings. Please see the Application Event Log for more details.&quot;, MsgBoxStyle.Critical, Me.Text)\n    Exit Sub\nEnd Try\n\nDim taskFolderObject As TaskFolder = If(taskService.GetFolder(&quot;myTaskFolder&quot;), taskService.RootFolder.CreateFolder(&quot;myTaskFolder&quot;))\ntaskFolderObject.RegisterTaskDefinition(&quot;My Task&quot;, newTask)\n\nnewTask.Dispose()\ntaskService.Dispose()</code></pre>\n\n",
    "PostedDate": "2016-08-30T15:21:50.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1483961",
    "ThreadId": "657546",
    "Html": "Does this happen on systems that are Windows XP only or also on new versions of Windows? Windows XP does not support folders.\r<br />\n<br />\nAlso, LogonTriggers are tricky. If specified that way you have, without any UserId parameter, then it applies to all logons of all users on the system and must be registered with an account that has the rights on the system to specify that. Check the Documentation tab and look for security for more details.<br />\n",
    "PostedDate": "2016-09-17T12:27:05.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]