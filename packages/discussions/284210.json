[
  {
    "Id": "717303",
    "ThreadId": "284210",
    "Html": "\r\n<p>In reviewing the implementation of Delay and RandomDelay, it seems that they have essentially identical behavior and use...&nbsp;</p>\r\n<p><strong>Daily Trigger</strong></p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a delay time that is randomly added to the start time of the trigger.</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n[DefaultValue(0)]\r\n<span style=\"color:blue\">public</span> TimeSpan RandomDelay\r\n{\r\n\t<span style=\"color:blue\">get</span>\r\n\t{\r\n\t\t<span style=\"color:blue\">if</span> (v2Trigger != <span style=\"color:blue\">null</span>)\r\n\t\t\t<span style=\"color:blue\">return</span> Task.StringToTimeSpan(((V2Interop.IDailyTrigger)v2Trigger).RandomDelay);\r\n\t\t<span style=\"color:blue\">if</span> (v1Trigger != <span style=\"color:blue\">null</span>)\r\n\t\t\t<span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotV1SupportedException();\r\n\t\t<span style=\"color:blue\">return</span> (unboundValues.ContainsKey(<span style=\"color:#a31515\">&quot;RandomDelay&quot;</span>) ? (TimeSpan)unboundValues[<span style=\"color:#a31515\">&quot;RandomDelay&quot;</span>] : TimeSpan.Zero);\r\n\t}\r\n\t<span style=\"color:blue\">set</span>\r\n\t{\r\n\t\t<span style=\"color:blue\">if</span> (v2Trigger != <span style=\"color:blue\">null</span>)\r\n\t\t\t((V2Interop.IDailyTrigger)v2Trigger).RandomDelay = Task.TimeSpanToString(value);\r\n\t\t<span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (v1Trigger != <span style=\"color:blue\">null</span>)\r\n\t\t\t<span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotV1SupportedException();\r\n\t\t<span style=\"color:blue\">else</span>\r\n\t\t\tunboundValues[<span style=\"color:#a31515\">&quot;RandomDelay&quot;</span>] = value;\r\n\t}\r\n}\r\n\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a value that indicates the amount of time before the task is started.</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The delay duration.&lt;/value&gt;</span>\r\nTimeSpan ITriggerDelay.Delay\r\n{\r\n\t<span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.RandomDelay; }\r\n\t<span style=\"color:blue\">set</span> { <span style=\"color:blue\">this</span>.RandomDelay = value; }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p><strong>Boot Trigger</strong></p>\r\n<p><strong>&nbsp;</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a value that indicates the amount of time between when the system is booted and when the task is started.</span>\r\n<span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n[DefaultValue(0)]\r\n<span style=\"color:blue\">public</span> TimeSpan Delay\r\n{\r\n\t<span style=\"color:blue\">get</span>\r\n\t{\r\n\t\t<span style=\"color:blue\">if</span> (v2Trigger != <span style=\"color:blue\">null</span>)\r\n\t\t\t<span style=\"color:blue\">return</span> Task.StringToTimeSpan(((V2Interop.IBootTrigger)v2Trigger).Delay);\r\n\t\t<span style=\"color:blue\">if</span> (v1Trigger != <span style=\"color:blue\">null</span>)\r\n\t\t\t<span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotV1SupportedException();\r\n\t\t<span style=\"color:blue\">return</span> (unboundValues.ContainsKey(<span style=\"color:#a31515\">&quot;Delay&quot;</span>) ? (TimeSpan)unboundValues[<span style=\"color:#a31515\">&quot;Delay&quot;</span>] : TimeSpan.Zero);\r\n\t}\r\n\t<span style=\"color:blue\">set</span>\r\n\t{\r\n\t\t<span style=\"color:blue\">if</span> (v2Trigger != <span style=\"color:blue\">null</span>)\r\n\t\t\t((V2Interop.IBootTrigger)v2Trigger).Delay = Task.TimeSpanToString(value);\r\n\t\t<span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (v1Trigger != <span style=\"color:blue\">null</span>)\r\n\t\t\t<span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotV1SupportedException();\r\n\t\t<span style=\"color:blue\">else</span>\r\n\t\t\tunboundValues[<span style=\"color:#a31515\">&quot;Delay&quot;</span>] = value;\r\n\t}\r\n}</pre>\r\n<pre><br></pre>\r\n</div>\r\n<p>I'm wondering if this is just un-refactored code, or if there was a conscious decision to make things work in this fashion?</p>\r\n",
    "PostedDate": "2011-12-26T21:22:54.363-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "717474",
    "ThreadId": "284210",
    "Html": "<p>It was conscious as I wanted to closely follow the scripting model of the V2 native library. I added the ITriggerDelay interface as a means of simplifying some of the UI code. You will notice that the RandomDelay and Delay properties pull from their similarly named counterparts in the V2 library.</p>\n<p>It was also important to retain the different property names as they do behave differently. RandomDelay will pick a&nbsp;random time up to the amount specified before starting the task. Delay will execute at precisely that time.</p>",
    "PostedDate": "2011-12-27T08:13:43.037-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]