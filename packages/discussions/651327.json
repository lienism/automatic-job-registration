[
  {
    "Id": "1463283",
    "ThreadId": "651327",
    "Html": "Hi.  Fair warning - I'm not the administrator making changes to the server.  I don't understand windows server permissions.\r<br />\n<br />\nWe're trying to upgrade from IIS 7.5 on 2008 to IIS 8 on 2012.  The Web Application is attempting to use the Task Scheduler Managed Wrapper to schedule a powershell script (which in turn performs a request to the web application...)\r<br />\n<br />\nThis was all working fine on IIS 7.5/2008 - we had to create a service account and give it permissions to use the task scheduler.  Then configure the app pool in IIS which runs the web application to use that service account. \r<br />\n<br />\nNow that we've upgraded to IIS 8/2012, it doesn't work.  Here's what I'm trying to do:\r<br />\n<br />\n'''<br />\n<pre><code>        using (TaskService ts = new TaskService()) {\n            Microsoft.Win32.TaskScheduler.Task task = null;\n            TaskDefinition td;\n\n            // first make sure there's a task folder\n            try {\n                ts.RootFolder.CreateFolder(&quot;XXX&quot;);\n            }\n            catch (Exception error) {\n                sm_log.Info(&quot;Error creating XXX task folder in windows scheduler, should be ok: &quot; + error.Message);\n            }\n\n            // next, see if the task already exists for this schedule.\n            try {\n                task = ts.RootFolder.SubFolders[&quot;XXX&quot;].Tasks[&quot;XXX SCHEDULER &quot; + schedule.id.ToString()];\n            }\n            catch (Exception error) {\n                // this is fine, if task doesn't exist, it'll raise exception\n                sm_log.Info(&quot;Attempt to edit a schedule &quot; + schedule.id.ToString() + &quot; which doesn't exist; should be fine: &quot; + error.ToString());\n            }\n\n            // if the task doesn't exist, create a new one\n            if (task == null) {\n                td = ts.NewTask();\n                td.RegistrationInfo.Description = &quot;XXX Scheduler Task; Test Suite = &quot; + suite.Name + &quot; on Setup &quot; + setup.Name\n                                                + &quot; (Suite = &quot; + suite.id + &quot;; setup = &quot; + setup.id + &quot;)&quot;;\n                string strArguments = @&quot;&quot;&quot;&quot; + HostingEnvironment.ApplicationPhysicalPath + @&quot;\\bin\\Infrastructure\\Scheduler.ps1&quot;&quot;&quot;\n                                    + &quot; -virtualPath &quot; + HostingEnvironment.ApplicationVirtualPath\n                                    + &quot; -server &quot; + request.Url.Host\n                                    + &quot; -port &quot; + request.Url.Port\n                                    + &quot; -projectId &quot; + schedule.ProjectId.ToString()\n                                    + &quot; -scheduleId &quot; + schedule.id.ToString();\n                // on test and prod, use https\n                if (request.IsSecureConnection) {\n                    strArguments += &quot; -https&quot;;\n                }\n                td.Actions.Add(new ExecAction(&quot;powershell&quot;, strArguments));\n            }\n            else {\n                // i.e., task already exists\n                td = task.Definition;\n            }\n\n            td.Principal.LogonType = TaskLogonType.ServiceAccount;\n            td.Principal.RunLevel = TaskRunLevel.Highest;\n\n            // set the time the one-time trigger should run.\n            td.Triggers.Clear();\n            td.Triggers.Add(new TimeTrigger(schedule.RecurrenceParams.StartTime));\n\n            ts.RootFolder.SubFolders[&quot;XXX&quot;].RegisterTaskDefinition(&quot;XXX SCHEDULER &quot; + schedule.id.ToString(), td, TaskCreation.CreateOrUpdate, &quot;SYSTEM&quot;, null, TaskLogonType.ServiceAccount);\n            sm_log.Info(&quot;Scheduled task in XXX subfolder: XXX SCHEDULER &quot; + schedule.id.ToString() + &quot; for &quot; + schedule.RecurrenceParams.StartTime);\n        }</code></pre>\n\n'''\r<br />\n<br />\nI'm using the 2.5.4 Task Scheduler.  It's an MVC 4 application using 4.5 of dot net.  I'd love to think I'm doing something dumb/wrong, e.g.:\r<br />\n<br />\n'''<br />\n<pre><code>            td.Principal.LogonType = TaskLogonType.ServiceAccount;\n            td.Principal.RunLevel = TaskRunLevel.Highest;</code></pre>\n\n'''\r<br />\n<br />\nThe error we're getting:\r<br />\n<br />\n'''\r<br />\nThe request is not supported. (Exception from HRESULT: 0x80070032)\r<br />\n   at Microsoft.Win32.TaskScheduler.V2Interop.ITaskFolder.GetFolders(Int32 flags)\r<br />\n   at Microsoft.Win32.TaskScheduler.TaskFolder.get_SubFolders()\r<br />\n   at OurStuff.Scheduler.UpdateSchedule(Schedule schedule, HttpRequestBase request) in OurCode.cs: line 432\r<br />\n   at OurStuff.Controller.UpdateSchedule  in OurCode.cs: line 137\r<br />\n'''\r<br />\n<br />\nThanks!\r<br />\n<br />\n-Matt LeMay<br />\n",
    "PostedDate": "2016-02-15T10:28:27.16-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1463309",
    "ThreadId": "651327",
    "Html": "I don't have an easy answer for you so let me ask some questions to see if I can't see something. So it appears you're checking for the existence of the folder XXX. Are you able to create it when it doesn't exist? If you remove the subfolder, are you able to create the task in the root folder?<br />\n",
    "PostedDate": "2016-02-15T17:20:12.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]