[
  {
    "Id": "253781",
    "ThreadId": "74190",
    "Html": "<p>Hi</p>\r\n<p>I need to create a schedule task which runs weekly. I am using weekly trigger to schedule a task. This works fine with me for XP (logged in as Admin) &amp; VIsta (logged in as Admin) but not in Vista (logged in as User). I need to schedule the task even when i am logged in as User. I am using this scheduler in two forms (Form 1 &amp; Form 2). I am able to schedule tasks from Form1 but i am not able to schedule the task in Form2.</p>\r\n<p>Here is the code which i am using in both the Forms (Form 1 &amp; Form 2)</p>\r\n<p>&nbsp;</p>\r\n<p>TaskService&nbsp;SchedulertaskService = new TaskService();</p>\r\n<p>TaskFolder SchedulertFolder = SchedulertaskService.RootFolder;</p>\r\n<p>Boolean bSchedulerSunday, bSchedulerMonday, bSchedulerTuesday, bSchedulerWednesday, bSchedulerThursday, bSchedulerFriday, bSchedulerSaturday;</p>\r\n<p>String&nbsp;Day = DateTime.Today.Day.ToString();</p>\r\n<p>String Month = DateTime.Today.Month.ToString();</p>\r\n<p>String Year = DateTime.Today.Year.ToString();</p>\r\n<p>String hh, mm, ss;</p>\r\n<p>String Datestring;</p>\r\n<p>DateTime dateValue;</p>\r\n<p>Version ver = SchedulertaskService.HighestSupportedVersion;</p>\r\n<p>bool newver = (ver == new Version(1, 2));</p>\r\n<p>bSchedulerSunday = bSchedulerMonday = bSchedulerTuesday = bSchedulerWednesday = bSchedulerThursday = bSchedulerFriday = bSchedulerSaturday =false;</p>\r\n<p><br>TaskDefinition SchedulertaskDefinition = SchedulertaskService.NewTask();</p>\r\n<p>SchedulertaskDefinition.Data =&quot;Data&quot;;</p>\r\n<p>SchedulertaskDefinition.Principal.UserId = Environment.UserName;</p>\r\n<p>SchedulertaskDefinition.Principal.LogonType = TaskLogonType.InteractiveToken;</p>\r\n<p>SchedulertaskDefinition.Settings.DisallowStartIfOnBatteries =true;</p>\r\n<p>SchedulertaskDefinition.Settings.Enabled =true;</p>\r\n<p>SchedulertaskDefinition.Settings.IdleSettings.RestartOnIdle =false;</p>\r\n<p>SchedulertaskDefinition.Settings.IdleSettings.StopOnIdleEnd =false;</p>\r\n<p>SchedulertaskDefinition.Settings.IdleSettings.WaitTimeout =TimeSpan.FromMinutes(10);</p>\r\n<p>SchedulertaskDefinition.Settings.Priority = System.Diagnostics.ProcessPriorityClass.High;</p>\r\n<p>SchedulertaskDefinition.Settings.RunOnlyIfIdle =false;</p>\r\n<p>SchedulertaskDefinition.Settings.RunOnlyIfNetworkAvailable =false;</p>\r\n<p>if (newver)</p>\r\n<p>{<br>SchedulertaskDefinition.Principal.RunLevel = TaskRunLevel.LUA;</p>\r\n<p>SchedulertaskDefinition.RegistrationInfo.Version = new Version(0, 9);<br>SchedulertaskDefinition.Settings.AllowDemandStart = true;<br>SchedulertaskDefinition.Settings.AllowHardTerminate = true;<br>SchedulertaskDefinition.Settings.Compatibility = TaskCompatibility.V2;<br>SchedulertaskDefinition.Settings.StartWhenAvailable = true;<br>SchedulertaskDefinition.Settings.WakeToRun = false;<br>}<br>try<br>{<br>for&nbsp; (Row = 0; Row &lt;= uiSchedulerGrid.Rows.Count - 1; Row++)</p>\r\n<p>{<br>foreach (Task task in SchedulertFolder.Tasks)</p>\r\n<p>{<br>if (task.Name == &quot;Scheduler &quot; + uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString() + &quot; task&quot;)</p>\r\n<p>{</p>\r\n<p>&nbsp;SchedulertaskService.RootFolder.DeleteTask(task.Name);<br>}</p>\r\n<p>}</p>\r\n<p>&nbsp;hh = uiSchedulerGrid.Rows[Row].Cells[&quot;Time&quot;].Value.ToString().Substring(0, 2);</p>\r\n<p>&nbsp;mm = uiSchedulerGrid.Rows[Row].Cells[&quot;Time&quot;].Value.ToString().Substring(2, 2);<br>&nbsp;ss = &quot;00&quot;;<br>&nbsp;switch (uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString())<br>&nbsp;{</p>\r\n<p>&nbsp;case &quot;Sunday&quot;:</p>\r\n<p>&nbsp;if (uiSchedulerGrid.Rows[Row].Cells[&quot;Active&quot;].Value.ToString() == &quot;Yes&quot;)</p>\r\n<p>{</p>\r\n<p>Datestring = Month + &quot;/&quot; + Day + &quot;/&quot; + Year + &quot; &quot; + hh.ToString() + &quot;:&quot; + mm.ToString() + &quot;:&quot; + ss;</p>\r\n<p>&nbsp;dateValue = DateTime.Parse(Datestring);</p>\r\n<p>TaskFolder SchedulertaskFolder = SchedulertaskService.RootFolder;<br>SchedulertaskDefinition = SchedulertaskService.NewTask();<br>SchedulertaskDefinition.RegistrationInfo.Description = &quot;Scheduler&quot;</p>\r\n<p>WeeklyTrigger wTrigger = (WeeklyTrigger)SchedulertaskDefinition.Triggers.Add(new WeeklyTrigger());</p>\r\n<p>wTrigger.DaysOfWeek = DaysOfTheWeek.Sunday;</p>\r\n<p>wTrigger.StartBoundary = dateValue;<br>wTrigger.WeeksInterval = 1;<br>SchedulertaskDefinition.Actions.Add(new ExecAction(&quot;notepad.exe&quot;, &quot; &quot;, null));</p>\r\n<p>SchedulertaskFolder.RegisterTaskDefinition(&quot;Scheduler &quot; + uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString() + &quot; task&quot;, SchedulertaskDefinition, TaskCreation.CreateOrUpdate, null, null, TaskLogonType.InteractiveToken, null);<br>}</p>\r\n<p>&nbsp;break;</p>\r\n<p>case&nbsp;&quot;Monday&quot;:</p>\r\n<p>&nbsp;if (uiSchedulerGrid.Rows[Row].Cells[&quot;Active&quot;].Value.ToString() == &quot;Yes&quot;)</p>\r\n<p>{</p>\r\n<p>&nbsp;Datestring = Month + &quot;/&quot; + Day + &quot;/&quot; + Year + &quot; &quot; + hh.ToString() + &quot;:&quot; + mm.ToString() + &quot;:&quot; + ss;</p>\r\n<p>&nbsp;dateValue = DateTime.Parse(Datestring);</p>\r\n<p>&nbsp;TaskFolder SchedulertaskFolder = SchedulertaskService.RootFolder;<br>&nbsp;SchedulertaskDefinition = SchedulertaskService.NewTask();<br>&nbsp;SchedulertaskDefinition.RegistrationInfo.Description = &quot;Scheduler&quot;</p>\r\n<p>&nbsp;WeeklyTrigger wTrigger = (WeeklyTrigger)SchedulertaskDefinition.Triggers.Add(new WeeklyTrigger());</p>\r\n<p>&nbsp; wTrigger.DaysOfWeek = DaysOfTheWeek.Monday;</p>\r\n<p>&nbsp;&nbsp;wTrigger.StartBoundary = dateValue;<br>&nbsp;wTrigger.WeeksInterval = 1;<br>&nbsp;SchedulertaskDefinition.Actions.Add(new ExecAction(&quot;notepad.exe&quot;, &quot; &quot;, null));</p>\r\n<p>&nbsp;SchedulertaskFolder.RegisterTaskDefinition(&quot;Scheduler &quot; + uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString() + &quot; task&quot;, SchedulertaskDefinition, TaskCreation.CreateOrUpdate, null, null, TaskLogonType.InteractiveToken, null);</p>\r\n<p>}</p>\r\n<p>&nbsp;break;</p>\r\n<p>case&nbsp;&quot;Tuesday&quot;:</p>\r\n<p>&nbsp;if (uiSchedulerGrid.Rows[Row].Cells[&quot;Active&quot;].Value.ToString() == &quot;Yes&quot;)</p>\r\n<p>{</p>\r\n<p>&nbsp;Datestring = Month + &quot;/&quot; + Day + &quot;/&quot; + Year + &quot; &quot; + hh.ToString() + &quot;:&quot; + mm.ToString() + &quot;:&quot; + ss;</p>\r\n<p>&nbsp;dateValue = DateTime.Parse(Datestring);</p>\r\n<p>&nbsp;TaskFolder SchedulertaskFolder = SchedulertaskService.RootFolder;<br>&nbsp;SchedulertaskDefinition = SchedulertaskService.NewTask();<br>&nbsp;SchedulertaskDefinition.RegistrationInfo.Description = &quot;Scheduler&quot;</p>\r\n<p>&nbsp;WeeklyTrigger wTrigger = (WeeklyTrigger)SchedulertaskDefinition.Triggers.Add(new WeeklyTrigger());</p>\r\n<p>&nbsp; wTrigger.DaysOfWeek = DaysOfTheWeek.Tuesday;</p>\r\n<p>&nbsp;&nbsp;wTrigger.StartBoundary = dateValue;<br>&nbsp;wTrigger.WeeksInterval = 1;<br>&nbsp;SchedulertaskDefinition.Actions.Add(new ExecAction(&quot;notepad.exe&quot;, &quot; &quot;, null));</p>\r\n<p>&nbsp;SchedulertaskFolder.RegisterTaskDefinition(&quot;Scheduler &quot; + uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString() + &quot; task&quot;, SchedulertaskDefinition, TaskCreation.CreateOrUpdate, null, null, TaskLogonType.InteractiveToken, null);</p>\r\n<p>}</p>\r\n<p>&nbsp;break;<br>&nbsp;</p>\r\n<p>case &quot;Wednesday&quot;:</p>\r\n<p>&nbsp;if (uiSchedulerGrid.Rows[Row].Cells[&quot;Active&quot;].Value.ToString() == &quot;Yes&quot;)</p>\r\n<p>{</p>\r\n<p>&nbsp;Datestring = Month + &quot;/&quot; + Day + &quot;/&quot; + Year + &quot; &quot; + hh.ToString() + &quot;:&quot; + mm.ToString() + &quot;:&quot; + ss;</p>\r\n<p>&nbsp;dateValue = DateTime.Parse(Datestring);</p>\r\n<p>&nbsp;TaskFolder SchedulertaskFolder = SchedulertaskService.RootFolder;<br>&nbsp;SchedulertaskDefinition = SchedulertaskService.NewTask();<br>&nbsp;SchedulertaskDefinition.RegistrationInfo.Description = &quot;Scheduler&quot;</p>\r\n<p>&nbsp;WeeklyTrigger wTrigger = (WeeklyTrigger)SchedulertaskDefinition.Triggers.Add(new WeeklyTrigger());</p>\r\n<p>&nbsp; wTrigger.DaysOfWeek = DaysOfTheWeek.Wednesday;</p>\r\n<p>&nbsp;&nbsp;wTrigger.StartBoundary = dateValue;<br>&nbsp;wTrigger.WeeksInterval = 1;<br>&nbsp;SchedulertaskDefinition.Actions.Add(new ExecAction(&quot;notepad.exe&quot;, &quot; &quot;, null));</p>\r\n<p>&nbsp;SchedulertaskFolder.RegisterTaskDefinition(&quot;Scheduler &quot; + uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString() + &quot; task&quot;, SchedulertaskDefinition, TaskCreation.CreateOrUpdate, null, null, TaskLogonType.InteractiveToken, null);</p>\r\n<p>}</p>\r\n<p>&nbsp;break;</p>\r\n<p><br>&nbsp;case &quot;Thursday&quot;:</p>\r\n<p>&nbsp;if (uiSchedulerGrid.Rows[Row].Cells[&quot;Active&quot;].Value.ToString() == &quot;Yes&quot;)</p>\r\n<p>{</p>\r\n<p>&nbsp;Datestring = Month + &quot;/&quot; + Day + &quot;/&quot; + Year + &quot; &quot; + hh.ToString() + &quot;:&quot; + mm.ToString() + &quot;:&quot; + ss;</p>\r\n<p>&nbsp;dateValue = DateTime.Parse(Datestring);</p>\r\n<p>&nbsp;TaskFolder SchedulertaskFolder = SchedulertaskService.RootFolder;<br>&nbsp;SchedulertaskDefinition = SchedulertaskService.NewTask();<br>&nbsp;SchedulertaskDefinition.RegistrationInfo.Description = &quot;Scheduler&quot;</p>\r\n<p>&nbsp;WeeklyTrigger wTrigger = (WeeklyTrigger)SchedulertaskDefinition.Triggers.Add(new WeeklyTrigger());</p>\r\n<p>&nbsp; wTrigger.DaysOfWeek = DaysOfTheWeek.Thursday;</p>\r\n<p>&nbsp;wTrigger.StartBoundary = dateValue;<br>&nbsp;wTrigger.WeeksInterval = 1;<br>&nbsp;SchedulertaskDefinition.Actions.Add(new ExecAction(&quot;notepad.exe&quot;, &quot; &quot;, null));</p>\r\n<p>&nbsp;SchedulertaskFolder.RegisterTaskDefinition(&quot;Scheduler &quot; + uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString() + &quot; task&quot;, SchedulertaskDefinition, TaskCreation.CreateOrUpdate, null, null, TaskLogonType.InteractiveToken, null);</p>\r\n<p>}</p>\r\n<p>break;</p>\r\n<p>case &quot;Friday&quot;:</p>\r\n<p><br>&nbsp;if (uiSchedulerGrid.Rows[Row].Cells[&quot;Active&quot;].Value.ToString() == &quot;Yes&quot;)</p>\r\n<p>{</p>\r\n<p>Datestring = Month + &quot;/&quot; + Day + &quot;/&quot; + Year + &quot; &quot; + hh.ToString() + &quot;:&quot; + mm.ToString() + &quot;:&quot; + ss;</p>\r\n<p>dateValue = DateTime.Parse(Datestring);</p>\r\n<p>TaskFolder SchedulertaskFolder = SchedulertaskService.RootFolder;<br>SchedulertaskDefinition = SchedulertaskService.NewTask();<br>SchedulertaskDefinition.RegistrationInfo.Description = &quot;Scheduler&quot;</p>\r\n<p>WeeklyTrigger wTrigger = (WeeklyTrigger)SchedulertaskDefinition.Triggers.Add(new WeeklyTrigger());</p>\r\n<p>&nbsp;wTrigger.DaysOfWeek = DaysOfTheWeek.Friday;</p>\r\n<p>&nbsp;wTrigger.StartBoundary = dateValue;<br>&nbsp;wTrigger.WeeksInterval = 1;<br>&nbsp;SchedulertaskDefinition.Actions.Add(new ExecAction(&quot;notepad.exe&quot;, &quot; &quot;, null));</p>\r\n<p>&nbsp;SchedulertaskFolder.RegisterTaskDefinition(&quot;Scheduler &quot; + uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString() + &quot; task&quot;, SchedulertaskDefinition, TaskCreation.CreateOrUpdate, null, null, TaskLogonType.InteractiveToken, null);</p>\r\n<p>}</p>\r\n<p>break;</p>\r\n<p>case &quot;Saturday&quot;:</p>\r\n<p><br>&nbsp;if (uiSchedulerGrid.Rows[Row].Cells[&quot;Active&quot;].Value.ToString() == &quot;Yes&quot;)</p>\r\n<p>{</p>\r\n<p>Datestring = Month + &quot;/&quot; + Day + &quot;/&quot; + Year + &quot; &quot; + hh.ToString() + &quot;:&quot; + mm.ToString() + &quot;:&quot; + ss;</p>\r\n<p>dateValue = DateTime.Parse(Datestring);</p>\r\n<p>TaskFolder SchedulertaskFolder = SchedulertaskService.RootFolder;<br>SchedulertaskDefinition = SchedulertaskService.NewTask();<br>SchedulertaskDefinition.RegistrationInfo.Description = &quot;Scheduler&quot;</p>\r\n<p>WeeklyTrigger wTrigger = (WeeklyTrigger)SchedulertaskDefinition.Triggers.Add(new WeeklyTrigger());</p>\r\n<p>&nbsp;wTrigger.DaysOfWeek = DaysOfTheWeek.Saturday;</p>\r\n<p>&nbsp;wTrigger.StartBoundary = dateValue;<br>&nbsp;wTrigger.WeeksInterval = 1;<br>&nbsp;SchedulertaskDefinition.Actions.Add(new ExecAction(&quot;notepad.exe&quot;, &quot; &quot;, null));</p>\r\n<p>&nbsp;SchedulertaskFolder.RegisterTaskDefinition(&quot;Scheduler &quot; + uiSchedulerGrid.Rows[Row].Cells[&quot;Day&quot;].Value.ToString() + &quot; task&quot;, SchedulertaskDefinition, TaskCreation.CreateOrUpdate, null, null, TaskLogonType.InteractiveToken, null);</p>\r\n<p>}</p>\r\n<p>&nbsp;break;</p>\r\n<p>}</p>\r\n<p>}</p>\r\n<p>}</p>\r\n<p>catch (Exception ex)</p>\r\n<p>{</p>\r\n<p>if (ex.Message.Equals(&quot;Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))&quot;))</p>\r\n<p>{</p>\r\n<p>FrmErrorForm Errfrm = new FrmErrorForm(&quot;You must be logged on as administrator to schedule tasks&quot;, ex.Message + Environment.NewLine + ex.Source);</p>\r\n<p>Errfrm.ShowDialog();</p>\r\n<p>}</p>\r\n<p>else</p>\r\n<p>{</p>\r\n<p>FrmErrorForm Errfrm = new FrmErrorForm(&quot;Error in scheduler&quot;, ex.Message + Environment.NewLine + ex.Source);</p>\r\n<p>Errfrm.ShowDialog();</p>\r\n<p>}</p>\r\n<p>}</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>I dont know where i am going wrong.</p>\r\n<p>&nbsp;Any Suggestions?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-11-05T07:07:38.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "255156",
    "ThreadId": "74190",
    "Html": "<p>I'm not really sure how to the follow the code. There is a lot of redundancy. I pasted it into my test harness, cleaned it up a lot, and ran it. You had a few properties that are only available to Admin or System accounts. I removed those. This works for each of the account types. You were recreating the TaskDefinition without bringing down any of the work done at the start of the method using NewTask(). You also were repeating the exact same code within you switch statement. Any way, hope this works for you.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>TaskService SchedulertaskService = <span style=\"color:Blue\">new</span> TaskService();\r\nTaskFolder SchedulertFolder = SchedulertaskService.RootFolder;\r\nBoolean bSchedulerSunday, bSchedulerMonday, bSchedulerTuesday, bSchedulerWednesday, bSchedulerThursday, bSchedulerFriday, bSchedulerSaturday;\r\nbSchedulerSunday = bSchedulerMonday = bSchedulerTuesday = bSchedulerWednesday = bSchedulerThursday = bSchedulerFriday = bSchedulerSaturday =<span style=\"color:Blue\">false</span>;\r\n\r\nTaskDefinition SchedulertaskDefinition = SchedulertaskService.NewTask();\r\nSchedulertaskDefinition.Data = <span style=\"color:#A31515\">&quot;Data&quot;</span>;\r\nSchedulertaskDefinition.Principal.LogonType = TaskLogonType.InteractiveToken;\r\nSchedulertaskDefinition.Settings.DisallowStartIfOnBatteries =<span style=\"color:Blue\">true</span>;\r\nSchedulertaskDefinition.Settings.Enabled =<span style=\"color:Blue\">true</span>;\r\nSchedulertaskDefinition.Settings.IdleSettings.RestartOnIdle =<span style=\"color:Blue\">false</span>;\r\nSchedulertaskDefinition.Settings.IdleSettings.StopOnIdleEnd =<span style=\"color:Blue\">false</span>;\r\nSchedulertaskDefinition.Settings.IdleSettings.WaitTimeout =TimeSpan.FromMinutes(10);\r\nSchedulertaskDefinition.Settings.RunOnlyIfIdle =<span style=\"color:Blue\">false</span>;\r\nSchedulertaskDefinition.Settings.RunOnlyIfNetworkAvailable =<span style=\"color:Blue\">false</span>;\r\nSchedulertaskDefinition.RegistrationInfo.Description = <span style=\"color:#A31515\">&quot;Scheduler&quot;</span>;\r\n\r\nWeeklyTrigger wTrigger = (WeeklyTrigger)SchedulertaskDefinition.Triggers.Add(<span style=\"color:Blue\">new</span> WeeklyTrigger());\r\nwTrigger.WeeksInterval = 1;\r\n\r\nSchedulertaskDefinition.Actions.Add(<span style=\"color:Blue\">new</span> ExecAction(<span style=\"color:#A31515\">&quot;notepad.exe&quot;</span>, <span style=\"color:#A31515\">&quot; &quot;</span>, <span style=\"color:Blue\">null</span>));\r\n\r\n<span style=\"color:Blue\">if</span> (SchedulertaskService.HighestSupportedVersion == <span style=\"color:Blue\">new</span> Version(1, 2))\r\n{\r\n  SchedulertaskDefinition.RegistrationInfo.Version = <span style=\"color:Blue\">new</span> Version(0, 9);\r\n  SchedulertaskDefinition.Settings.AllowDemandStart = <span style=\"color:Blue\">true</span>;\r\n  SchedulertaskDefinition.Settings.AllowHardTerminate = <span style=\"color:Blue\">true</span>;\r\n  SchedulertaskDefinition.Settings.StartWhenAvailable = <span style=\"color:Blue\">true</span>;\r\n  SchedulertaskDefinition.Settings.WakeToRun = <span style=\"color:Blue\">false</span>;\r\n}\r\n<span style=\"color:Blue\">try</span>\r\n{\r\n  <span style=\"color:Blue\">for</span> (Row = 0; Row &lt;= uiSchedulerGrid.Rows.Count - 1; Row++)\r\n  {\r\n    <span style=\"color:Blue\">foreach</span> (Task task <span style=\"color:Blue\">in</span> SchedulertFolder.Tasks)\r\n    {\r\n      <span style=\"color:Blue\">if</span> (task.Name == <span style=\"color:#A31515\">&quot;Scheduler &quot;</span> + uiSchedulerGrid.Rows[Row].Cells[<span style=\"color:#A31515\">&quot;Day&quot;</span>].Value.ToString() + <span style=\"color:#A31515\">&quot; task&quot;</span>)\r\n      {\r\n        SchedulertaskService.RootFolder.DeleteTask(task.Name);\r\n      }\r\n    }\r\n\r\n    <span style=\"color:Blue\">if</span> (uiSchedulerGrid.Rows[Row].Cells[<span style=\"color:#A31515\">&quot;Active&quot;</span>].Value.ToString() == <span style=\"color:#A31515\">&quot;Yes&quot;</span>)\r\n    {\r\n      wTrigger.DaysOfWeek = (DaysOfTheWeek)Enum.Parse(<span style=\"color:Blue\">typeof</span>(DaysOfTheWeek), uiSchedulerGrid.Rows[Row].Cells[<span style=\"color:#A31515\">&quot;Day&quot;</span>].Value.ToString(), <span style=\"color:Blue\">true</span>);\r\n      <span style=\"color:Blue\">int</span> hh = <span style=\"color:Blue\">int</span>.Parse(uiSchedulerGrid.Rows[Row].Cells[<span style=\"color:#A31515\">&quot;Time&quot;</span>].Value.ToString().Substring(0, 2));\r\n      <span style=\"color:Blue\">int</span> mm = <span style=\"color:Blue\">int</span>.Parse(uiSchedulerGrid.Rows[Row].Cells[<span style=\"color:#A31515\">&quot;Time&quot;</span>].Value.ToString().Substring(2, 2));\r\n      wTrigger.StartBoundary = DateTime.Today + <span style=\"color:Blue\">new</span> TimeSpan(hh, mm, 0);\r\n      SchedulertFolder.RegisterTaskDefinition(<span style=\"color:#A31515\">&quot;Scheduler &quot;</span> + uiSchedulerGrid.Rows[Row].Cells[<span style=\"color:#A31515\">&quot;Day&quot;</span>].Value.ToString() + <span style=\"color:#A31515\">&quot; task&quot;</span>, SchedulertaskDefinition);\r\n    }\r\n  }\r\n}\r\n<span style=\"color:Blue\">catch</span> (Exception ex)\r\n{\r\n  <span style=\"color:Blue\">if</span> (ex.Message.Equals(<span style=\"color:#A31515\">&quot;Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))&quot;</span>))\r\n  {\r\n    FrmErrorForm Errfrm = <span style=\"color:Blue\">new</span> FrmErrorForm(<span style=\"color:#A31515\">&quot;You must be logged on as administrator to schedule tasks&quot;</span>, ex.Message + Environment.NewLine + ex.Source);\r\n    Errfrm.ShowDialog();\r\n  }\r\n  <span style=\"color:Blue\">else</span>\r\n  {\r\n    FrmErrorForm Errfrm = <span style=\"color:Blue\">new</span> FrmErrorForm(<span style=\"color:#A31515\">&quot;Error in scheduler&quot;</span>, ex.Message + Environment.NewLine + ex.Source);\r\n    Errfrm.ShowDialog();\r\n  }\r\n}\r\n</pre>\r\n</div>",
    "PostedDate": "2009-11-09T10:17:43.607-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]