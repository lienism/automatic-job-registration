[
  {
    "Id": "1478815",
    "ThreadId": "656345",
    "Html": "I have a WPF client application that checks against its server to ensure it is up to date. If it's not, an elevated process launches to perform the update and the client application closes. The updater re-launches the WPF client application after the update is complete, but it is launched with elevated privileges. I am trying to use the TaskService to get around that by having it launch the WPF client application with the leastpriviledges after the update is complete. I am seeing that it launches as a background task and is invisible to the user. I have checked Hidden = false on the task definition but it is still hidden. I have tried launching cmd.exe instead with the WPF client application as the arguments with the same result.<br />\n<pre><code>                var arguments = string.Format(&quot;/C \\&quot;{0}\\&quot;&quot;, Executable);\n\n                using (var ts = new TaskService())\n                {\n                    var taskName = &quot;RelaunchApp&quot;;\n\n                    var td = ts.NewTask();\n                    td.RegistrationInfo.Description = string.Format(&quot;Relaunch application {0}&quot;, Executable);\n\n                    td.Actions.Add(new ExecAction(&quot;cmd.exe&quot;, arguments));\n\n                    td.Settings.Priority = ProcessPriorityClass.Normal;\n                    td.Settings.Hidden = false;\n                    td.Principal.RunLevel = TaskRunLevel.LUA;\n                    td.Principal.LogonType = TaskLogonType.InteractiveToken;\n                    td.Settings.AllowDemandStart = true;\n                    td.Settings.DisallowStartIfOnBatteries = false;\n                    td.Settings.StopIfGoingOnBatteries = false;\n\n                    var ret = ts.RootFolder.RegisterTaskDefinition(taskName, td);\n\n                    var clientTask = ts.FindTask(taskName);\n                    if (null != clientTask)\n                    {\n                        if (clientTask.Enabled)\n                        {\n                            clientTask.Run(arguments);\n                        }\n                    }\n                    else\n                    {\n                        TraceLine(&quot;Task not found.&quot;);\n                    }\n\n                    td.Dispose();\n\n                    ts.RootFolder.DeleteTask(taskName);\n                }</code></pre>\n\nI have also tried launching the WPF client app directly:<br />\n<pre><code>                using (var ts = new TaskService())\n                {\n                    var taskName = &quot;RelaunchApp&quot;;\n\n                    var td = ts.NewTask();\n                    td.RegistrationInfo.Description = string.Format(&quot;Relaunch application {0}&quot;, Executable);\n\n                    td.Actions.Add(new ExecAction(Executable));\n\n                    td.Settings.Priority = ProcessPriorityClass.Normal;\n                    td.Settings.Hidden = false;\n                    td.Principal.RunLevel = TaskRunLevel.LUA;\n                    td.Settings.AllowDemandStart = true;\n                    td.Settings.DisallowStartIfOnBatteries = false;\n                    td.Settings.StopIfGoingOnBatteries = false;\n                    var ret = ts.RootFolder.RegisterTaskDefinition(taskName, td);\n\n                    var clientTask = ts.FindTask(taskName);\n                    if (null != clientTask)\n                    {\n                        if (clientTask.Enabled)\n                        {\n                            clientTask.Run();\n                        }\n                    }\n                    else\n                    {\n                        TraceLine(&quot;Task not found.&quot;);\n                    }\n\n                    td.Dispose();\n\n                    ts.RootFolder.DeleteTask(taskName);\n                }</code></pre>\n\nWhat do I need to do to make the application visible?\r<br />\n<br />\nThank you!<br />\n",
    "PostedDate": "2016-07-13T10:48:16.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1479074",
    "ThreadId": "656345",
    "Html": "The <code>TaskService</code> constructor with parameters will run in the user context of the current process. When you register tasks, they also will then run in that same user's context. Elevation will only change the rights of the context's token. If the current context is the user process, then your first code snippet using <code>InteractiveToken</code> should allow the process to be visible. If the context in which <code>TaskService</code> is constructed is not the user's context, then you need to construct it with parameters that specify the user's account.<br />\n",
    "PostedDate": "2016-07-15T13:22:49.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2016-07-20T11:11:33.3-07:00"
  }
]