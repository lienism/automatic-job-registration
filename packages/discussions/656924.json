[
  {
    "Id": "1480380",
    "ThreadId": "656924",
    "Html": "I keep getting a NotV1SupportedException when calling the RegisterChanges() function on a Task object.\r<br />\n<br />\nThis is the code that I'm using...<br />\n<pre><code>Using taskServiceObject As TaskScheduler.TaskService = New TaskScheduler.TaskService()\n  Dim task As TaskScheduler.Task = taskServiceObject.GetTask(&quot;my task&quot;)\n\n  If task IsNot Nothing Then\n    ' Do some changes to the task here\n    task.RegisterChanges()\n    task.Dispose()\n  End If\nEnd Using</code></pre>\n\nWhen it gets to the RegisterChanges() function it immediately crashes.\r<br />\n<br />\nBut if I use this code instead...<br />\n<pre><code>Dim taskServiceObject As New TaskScheduler.TaskService()\nDim task As TaskScheduler.Task = taskServiceObject.GetTask(&quot;my task&quot;)\n\nIf task IsNot Nothing Then\n  ' Do some changes to the task here\n  task.RegisterChanges()\n  task.Dispose()\nEnd If\n\ntaskServiceObject.Dispose()</code></pre>\n\nIt works just fine with no crash upon the call of RegisterChanges().\r<br />\n<br />\nTheoretically speaking, both code examples should work but it isn't. Unless the .NET Framework is doing something wrong internally.<br />\n",
    "PostedDate": "2016-08-04T09:32:36.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1480384",
    "ThreadId": "656924",
    "Html": "Nevermind, I figured out what I was doing wrong.<br />\n<br />\nBecause of the way my code is laid out in the program the Using statement is disposing of the taskServiceObject Object thus when it came time to run the RegisterChanges() function call the function crashes because there's no taskServiceObject for it to reference back to because it's been disposed.<br />\n<br />\nBasically it's like this...<br />\n<pre><code>Public Sub doChangeToTask()\n  Dim task As TaskScheduler.Task = Nothing\n  If doesTaskExist(&quot;My Task&quot;, task) = True Then\n    ' Do changes to task.\n    task.RegisterChanges() ' This is where it would crash.\n  End If\nEnd Sub\n\nPrivate Function doesTaskExist(ByVal nameOfTask As String, ByRef taskObject As TaskScheduler.Task) As Boolean\n  Using taskServiceObject As TaskScheduler.TaskService = New TaskScheduler.TaskService()\n    taskObject = taskServiceObject.GetTask(nameOfTask)\n\n    If taskObject Is Nothing Then\n      Return False\n    Else\n      Return True\n    End If\n  End Using\nEnd Function</code></pre>\n\nI feel very stupid right now. I should have known that by using a Using construct it would cause the RegisterChanges() function to fail since there's no taskServiceObject for it to act on; it was disposed of at the end of the Using construct. Sometimes I want to put my head through the wall.<br />\n<br />\nThe right way to do it is this way...<br />\n<pre><code>Public Sub doChangeToTask()\n  Dim task As TaskScheduler.Task = Nothing\n  If doesTaskExist(&quot;My Task&quot;, task) = True Then\n    ' Do changes to task.\n    task.RegisterChanges() ' This is where it would crash.\n  End If\nEnd Sub\n\nPrivate Function doesTaskExist(ByVal nameOfTask As String, ByRef taskObject As TaskScheduler.Task) As Boolean\n  Dim taskServiceObject As New TaskScheduler.TaskService()\n  taskObject = taskServiceObject.GetTask(nameOfTask)\n\n  If taskObject Is Nothing Then\n    ' It's OK to dispose of the taskServiceObject Object here since\n    ' we know that the task we were looking for doesn't exist.\n    taskServiceObject.Dispose()\n    Return False\n  Else\n    ' Don't dispose of the taskServiceObject Object since we will need it\n    ' for the doChangeToTask() function that's calling this function.\n    Return True\n  End If\nEnd Function</code></pre>\n\nLike I said... Sometimes I want to put my head through the wall.<br />\n",
    "PostedDate": "2016-08-04T10:11:34.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2016-08-04T10:11:47.813-07:00"
  }
]