[
  {
    "Id": "916182",
    "ThreadId": "396537",
    "Html": "\r\n<p>How can I set the &quot;Run whether user is logged on or not&quot; option?</p>\r\n<p>I would like use this to ensure that a scheduled task run 5min aftet at startup.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;&nbsp;&nbsp; String strPath;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BootTrigger cBootTrigger;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cBootTrigger = new BootTrigger();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cBootTrigger.Delay = new TimeSpan(0, 5, 0);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strPath = &quot;c:\\\\MyAPP.exe&quot;;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (TaskService ts = new TaskService())<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TaskFolder tf = ts.RootFolder;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a new task definition and assign properties<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TaskDefinition td = ts.NewTask();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; td.RegistrationInfo.Description = &quot;MyAppAtBoot&quot;;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; td.Principal.LogonType = TaskLogonType.InteractiveToken;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create a trigger that will fire the task at this time every other day<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; td.Triggers.Add(cBootTrigger);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create an action that will launch Notepad whenever the trigger fires<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; td.Actions.Add(new ExecAction(strPath, null, null));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Register the task in the root folder<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ts.RootFolder.RegisterTaskDefinition(@&quot;MyAppAtBoot&quot;, td);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (Exception ex)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(ex.ToString());</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-09-22T15:53:50.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "916913",
    "ThreadId": "396537",
    "Html": "<p>Typically, you would use the \"SYSTEM\" account to register a task with a BootTrigger. You would then use TaskLogonType.ServiceAccount. You will just need to make sure the Action being triggered does not require permissions the SYSTEM account does not have (like accessing network resources).</p>",
    "PostedDate": "2012-09-24T15:51:25.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "917132",
    "ThreadId": "396537",
    "Html": "\r\n<div>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Hi Dahall</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Thanks for the reply, but Iâ€™m still stuck. Please have a look at the attached. Your guidance would be greatly appreciated.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">This is a snipped from my code:</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">private</span><span style=\"font-size:10.0pt; font-family:\">\r\n<span style=\"color:blue\">void</span> Schedule_ExecuteAtStartup(<span style=\"color:blue\">bool</span> bAddorRemoveTask\r\n<span style=\"color:green\">/*True add, False Remove*/</span>)</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">{</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:#2B91AF\">String</span> strPath;</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:#2B91AF\">BootTrigger</span> cBootTrigger;</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">cBootTrigger =\r\n<span style=\"color:blue\">new</span> <span style=\"color:#2B91AF\">BootTrigger</span>();</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">cBootTrigger.Delay =\r\n<span style=\"color:blue\">new</span> <span style=\"color:#2B91AF\">TimeSpan</span>(0, 5, 0);</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:blue\">string</span> user = System.Security.Principal.<span style=\"color:#2B91AF\">WindowsIdentity</span>.GetCurrent().Name;</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">strPath = System.Windows.Forms.<span style=\"color:#2B91AF\">Application</span>.StartupPath &#43;\r\n<span style=\"color:#A31515\">&quot;\\\\ServiceWatcher.exe&quot;</span>;</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:blue\">using</span> (<span style=\"color:#2B91AF\">TaskService</span> ts =\r\n<span style=\"color:blue\">new</span> <span style=\"color:#2B91AF\">TaskService</span>())</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">{</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:#2B91AF\">TaskFolder</span> tf = ts.RootFolder;\r\n</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:green\">// Create a new task definition and assign properties</span></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:#2B91AF\">TaskDefinition</span> td = ts.NewTask();</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">td.RegistrationInfo.Description =\r\n<span style=\"color:#A31515\">&quot;ServiceWatcherAtBoot&quot;</span>;</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">td.Principal.LogonType =\r\n<span style=\"color:#2B91AF\">TaskLogonType</span>.ServiceAccount;</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:blue\">if</span> (bAddorRemoveTask)</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">{</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:#2B91AF\">Task</span> CheckTask = ts.GetTask(<span style=\"color:#A31515\">&quot;ServiceWatcherAtBoot&quot;</span>);</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:blue\">if</span> (CheckTask !=\r\n<span style=\"color:blue\">null</span>)</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">{</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:#2B91AF\">Error_Log</span>.WriteLog(<span style=\"color:blue\">true</span>,\r\n<span style=\"color:blue\">false</span>, <span style=\"color:#A31515\">&quot;ServiceWatcher Schdule already exist...&quot;</span>);</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:blue\">return</span>;</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">}</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:green\">// Create a trigger that will fire the task at this time every other day</span></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">td.Triggers.Add(cBootTrigger);</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:green\">// Create an action that will launch Notepad whenever the trigger fires</span></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">td.Actions.Add(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">ExecAction</span>(strPath, <span style=\"color:blue\">null</span>,\r\n<span style=\"color:blue\">null</span>));<span style=\"color:green\">//(&quot;D:\\\\My Documents\\\\Software Development\\\\ServiceWatcher\\\\ServiceWatcher\\\\bin\\\\Release\\\\ServiceWatcher.exe&quot;, null, null));</span></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:green\">// Register the task in the root folder</span></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:blue\">try</span></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">{</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">ts.RootFolder.RegisterTaskDefinition(<span style=\"color:#A31515\">@&quot;ServiceWatcherAtBoot&quot;</span>, td);</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">}</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:blue\">catch</span> (<span style=\"color:#2B91AF\">Exception</span> ex)</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">{</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:#2B91AF\">Error_Log</span>.WriteLog(ex.ToString());</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">}</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">}</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:blue\">else</span></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">{</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\"><span style=\"color:green\">// Remove the task we just created</span></span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">ts.RootFolder.DeleteTask(<span style=\"color:#A31515\">&quot;ServiceWatcherAtBoot&quot;</span>);</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">}</span></p>\r\n<p style=\"text-autospace:none\"><span style=\"font-size:10.0pt; font-family:\">}</span></p>\r\n<p><span style=\"font-size:10.0pt; font-family:\">}</span><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">I get the following error when trying to add the task:</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">- ex {&quot;(39,4):Task:&quot;} System.Exception {System.Runtime.InteropServices.COMException}</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">&#43; [System.Runtime.InteropServices.COMException] {&quot;(39,4):Task:&quot;} System.Runtime.InteropServices.COMException</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">&#43; Data {System.Collections.ListDictionaryInternal} System.Collections.IDictionary {System.Collections.ListDictionaryInternal}</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">HelpLink null string</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">&#43; InnerException null System.Exception</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Message &quot;(39,4):Task:&quot; string</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Source &quot;&quot; string</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">StackTrace &quot; at Microsoft.Win32.TaskScheduler.V2Interop.ITaskFolder.RegisterTaskDefinition(String Path, ITaskDefinition pDefinition, Int32 flags, Object UserId, Object password, TaskLogonType LogonType, Object\r\n sddl)\\r\\n at Microsoft.Win32.TaskScheduler.TaskFolder.RegisterTaskDefinition(String Path, TaskDefinition definition, TaskCreation createType, String UserId, String password, TaskLogonType LogonType, String sddl)\\r\\n at Microsoft.Win32.TaskScheduler.TaskFolder.RegisterTaskDefinition(String\r\n Path, TaskDefinition definition)\\r\\n at ServiceWatcher.ServiceWatcher.Schedule_ExecuteAtStartup(Boolean bAddorRemoveTask) in D:\\\\My Documents\\\\Software Development\\\\ServiceWatcher\\\\ServiceWatcher\\\\Form1.cs:line 734&quot; string</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">&#43; TargetSite {Microsoft.Win32.TaskScheduler.V2Interop.IRegisteredTask RegisterTaskDefinition(System.String, Microsoft.Win32.TaskScheduler.V2Interop.ITaskDefinition, Int32, System.Object, System.Object, Microsoft.Win32.TaskScheduler.TaskLogonType,\r\n System.Object)} System.Reflection.MethodBase {System.Reflection.RuntimeMethodInfo}</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">&#43; Static members </span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">&#43; Non-Public members </span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Kind Regards</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<div>\r\n<div style=\"border:none; border-top:solid #B5C4DF 1.0pt; padding:3.0pt 0cm 0cm 0cm\">\r\n<p><b><span lang=\"EN-US\" style=\"font-size:10.0pt; font-family:\">From:</span></b><span lang=\"EN-US\" style=\"font-size:10.0pt; font-family:\"> dahall [email removed]\r\n<br>\r\n<b>Sent:</b> 25 September 2012 12:52 AM<br>\r\n<b>To:</b> Elco Grobler<br>\r\n<b>Subject:</b> Re: How to set the &quot;Run whether user is logged on or not&quot; [taskscheduler:396537]</span></p>\r\n</div>\r\n</div>\r\n<p></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\">From: dahall</span></p>\r\n<div id=\"ThreadNotificationPostBody\" style=\"margin-bottom:24.0pt\">\r\n<p><span style=\"font-size:9.0pt; font-family:\">Typically, you would use the &quot;SYSTEM&quot; account to register a task with a BootTrigger. You would then use TaskLogonType.ServiceAccount. You will just need to make sure the Action being triggered does not require\r\n permissions the SYSTEM account does not have (like accessing network resources).</span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2012-09-25T03:04:44.797-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "917329",
    "ThreadId": "396537",
    "Html": "<p>You need to specify the TaskLogonType in the RegisterTaskDefinition method call. Below is your code, with some optimizations, that works on my system.</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">const</span> <span style=\"color: blue;\">string</span> taskName = <span style=\"color: #a31515;\">\"ServiceWatcherAtBoot\"</span>;\r\n<span style=\"color: blue;\">using</span> (TaskService ts = <span style=\"color: blue;\">new</span> TaskService())\r\n{\r\n   <span style=\"color: blue;\">if</span> (bAddorRemoveTask)\r\n   {\r\n      <span style=\"color: blue;\">if</span> (ts.GetTask(taskName) != <span style=\"color: blue;\">null</span>)\r\n      {\r\n         Error_Log.WriteLog(<span style=\"color: blue;\">true</span>, <span style=\"color: blue;\">false</span>, <span style=\"color: #a31515;\">\"ServiceWatcher Schdule already exist...\"</span>);\r\n         <span style=\"color: blue;\">return</span>;\r\n      }\r\n\r\n      <span style=\"color: green;\">// Create a new task definition and assign properties</span>\r\n      TaskDefinition td = ts.NewTask();\r\n      td.RegistrationInfo.Description = <span style=\"color: #a31515;\">\"ServiceWatcherAtBoot\"</span>;\r\n      td.Triggers.Add(<span style=\"color: blue;\">new</span> BootTrigger() { Delay = TimeSpan.FromMinutes(5) });\r\n      String strPath = System.Windows.Forms.Application.StartupPath + <span style=\"color: #a31515;\">\"\\\\ServiceWatcher.exe\"</span>;\r\n      td.Actions.Add(<span style=\"color: blue;\">new</span> ExecAction(strPath, <span style=\"color: blue;\">null</span>, <span style=\"color: blue;\">null</span>));\r\n\r\n      <span style=\"color: green;\">// Register the task in the root folder</span>\r\n      <span style=\"color: blue;\">try</span>\r\n      {\r\n         ts.RootFolder.RegisterTaskDefinition(taskName, td, TaskCreation.Create, <span style=\"color: #a31515;\">\"SYSTEM\"</span>, <span style=\"color: blue;\">null</span>, TaskLogonType.ServiceAccount);\r\n      }\r\n      <span style=\"color: blue;\">catch</span> (Exception ex)\r\n      {\r\n         Error_Log.WriteLog(ex.ToString());\r\n      }\r\n   }\r\n   <span style=\"color: blue;\">else</span>\r\n   {\r\n      <span style=\"color: green;\">// Remove the task</span>\r\n      ts.RootFolder.DeleteTask(taskName);\r\n   }\r\n}\r\n</pre>\r\n</div>",
    "PostedDate": "2012-09-25T09:03:50.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]